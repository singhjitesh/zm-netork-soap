<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.user" value="user${TIME}${COUNTER}"/>
<t:property name="account1.name" value="${account1.user}@${defaultdomain.name}"/>
<t:property name="account1.name.encoded" value="${account1.name}" urlencode="true"/>
<t:property name="account2.user" value="user2${TIME}${COUNTER}"/>
<t:property name="account2.name" value="${account2.user}@${defaultdomain.name}"/>
<t:property name="grant.usr"			value="usr"/>
<t:property name="rights.manager"		value="rwidx"/>
<t:property name="op.grant"			value="grant"/>

<t:property name="ical1.ics"		value="${soapxml.root}/Dav/CalDav/Protocol/rfc4791/testical.ics"/>
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
	<t:objective>basic system check</t:objective>

	<t:test required="true">
		<t:request>
			<PingRequest xmlns="urn:zimbraAdmin"/>
		</t:request>
		<t:response>
			<t:select path="//admin:PingResponse"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="AcctSetup_rfc4791" type="always" >
	<t:objective>create test account</t:objective>

	<t:test required="true" >
		<t:request>
	  		<AuthRequest xmlns="urn:zimbraAdmin">
	    		<name>${admin.user}</name>
	    		<password>${admin.password}</password>
	  		</AuthRequest>
	 	</t:request>
	 	<t:response>
	    	<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
	 	</t:response>
	</t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>  

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>  
</t:test_case>


<t:test_case testcaseid="CalDav_Protocol_Calendar_Share_01" type="smoke" bugids="36714">
	<t:objective>Verify basic rfc4791 compliance - verify only VTODO events are returned and not VEVENT. Check for shared calendar</t:objective>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
 	<t:property name="server.restServlet" value="${account2.server}"/>

	<t:resttest>
		<t:restServletRequest method="POST">
			<filename>${ical1.ics}</filename>
			<folder>Calendar</folder>
			<fmt>ics</fmt>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
		</t:restServletResponse>
	</t:resttest>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="account1.folder.calendar"/>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="account1.folder.root"/>
        </t:response>
    </t:test>
 
     <t:test required="true">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${account1.folder.calendar}" op="${op.grant}">
                    <grant d="${account2.name}" gt="${grant.usr}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action" attr="zid" set="folder.zid"/>
        </t:response>
    </t:test>
    
	<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="account2.folder.root"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account2.folder.root}" name="Calendar.${TIME}.${COUNTER}" view="appointment" rid="${account1.folder.calendar}" zid="${account1.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="name" set="account2.delegated.calendar"/>
        </t:response>
    </t:test>

	<t:property name="caldav.user" value="${account2.name}"/>
	<t:property name="caldav.password" value="${defaultpassword.value}"/>
	<t:property name="caldav.server" value="${account2.server}"/>

	<t:caldav >
		<t:request method="REPORT" uri="/dav/${account2.name}/${account2.delegated.calendar}/" depth="1">
			<C:calendar-query xmlns:C="urn:ietf:params:xml:ns:caldav">
			        <C:filter>
			                <C:comp-filter name="VCALENDAR">
			                        <C:comp-filter name="VTODO"/>
			                </C:comp-filter>
			        </C:filter>
			        <D:prop xmlns:D="DAV:">
			                <D:getetag/>
			                <C:calendar-data/>
			        </D:prop>
			</C:calendar-query>
	 	</t:request>
	 	<t:response>
			<t:select path="//D:response">
                <t:select path="//D:href"/>  
                <t:select path="//D:propstat">
                    <t:select path="//D:status" match="HTTP/1.1 200 OK"/>
                    <t:select path="//D:prop">
						<t:select path="//C:calendar-data" match="(?s).*BEGIN:VCALENDAR.*">
							<t:select path="//C:calendar-data" match="(?s).*BEGIN:VEVENT.*" emptyset="1"/>
	                    </t:select>
					</t:select>
                </t:select>
            </t:select>
	 	</t:response>
	</t:caldav>

	<t:caldav >
		<t:request method="REPORT" uri="/dav/${account2.name}/${account2.delegated.calendar}/" depth="1">
			<C:calendar-query xmlns:C="urn:ietf:params:xml:ns:caldav">
			        <C:filter>
			                <C:comp-filter name="VCALENDAR">
			                        <C:comp-filter name="VEVENT"/>
			                </C:comp-filter>
			        </C:filter>
			        <D:prop xmlns:D="DAV:">
			                <D:getetag/>
			                <C:calendar-data/>
			        </D:prop>
			</C:calendar-query>
	 	</t:request>
	 	<t:response>
			<t:select path="//D:response">
                <t:select path="//D:href"/>  
                <t:select path="//D:propstat">
                    <t:select path="//D:status" match="HTTP/1.1 200 OK"/>
                    <t:select path="//D:prop">
						<t:select path="//C:calendar-data" match="(?s).*BEGIN:VCALENDAR.*">
							<t:select path="//C:calendar-data" match="(?s).*BEGIN:VTODO.*" emptyset="1"/>			               
	                    </t:select>
					</t:select>
                </t:select>
            </t:select>
	 	</t:response>
	</t:caldav>


</t:test_case>





</t:tests>

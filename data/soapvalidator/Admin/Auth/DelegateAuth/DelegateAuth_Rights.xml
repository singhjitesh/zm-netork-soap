<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="domain1.name" value="${TIME}.${COUNTER}.${defaultdomain.name}"/>
<t:property name="domain1.admin.name" value="domainadmin.${TIME}.${COUNTER}@${domain1.name}"/>
<t:property name="domain1.user.name" value="user.${TIME}.${COUNTER}@${domain1.name}"/>

<t:property name="domain2.name" value="${TIME}.${COUNTER}.${defaultdomain.name}"/>
<t:property name="domain2.admin.name" value="domainadmin.${TIME}.${COUNTER}@${domain2.name}"/>
<t:property name="domain2.user.name" value="user.${TIME}.${COUNTER}@${domain2.name}"/>



<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="DelegateAuth_Rights_Account_Setup" type="always">
    <t:objective>Create a test account</t:objective>
    <steps> 1. Login to admin account
            2. Create test_account1 and  test_account2 </steps>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="CreateDomainRequest0a">
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain1.name}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id" set="domain1.id"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${domain1.admin.name}</name>
                <password>${defaultpassword.value}</password>                
                <a n="zimbraIsDomainAdminAccount">${globals.true}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="domain1.admin.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="domain1.admin.server"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${domain1.user.name}</name>
                <password>${defaultpassword.value}</password>                
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="domain1.user.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="domain1.user.server"/>
        </t:response>
    </t:test>
    
    <t:test id="CreateDomainRequest0a">
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain2.name}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id" set="domain2.id"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${domain2.admin.name}</name>
                <password>${defaultpassword.value}</password>                
                <a n="zimbraIsDomainAdminAccount">${globals.true}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="domain2.admin.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="domain2.admin.server"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${domain2.user.name}</name>
                <password>${defaultpassword.value}</password>                
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="domain2.user.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="domain2.user.server"/>
        </t:response>
    </t:test>
    

</t:test_case>



<t:test_case testcaseid="DelegateAuth_Rights_01" type="smoke" >
    <t:objective>Verify the global admin can get a delegate auth token for a domain admin</t:objective>
    <t:steps> 
		1. Login to global admin account 
		2. DelegateAuthRequest for domain admin
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="delegateAuthRequest1a">
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin">
                <account by="name">${domain1.admin.name}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DelegateAuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>


</t:test_case>

<t:test_case testcaseid="DelegateAuth_Rights_02" type="smoke" >
    <t:objective>Verify the global admin can get a delegate auth token for a domain user</t:objective>
    <t:steps> 
		1. Login to global admin account 
		2. DelegateAuthRequest for domain user
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="delegateAuthRequest1a">
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin">
                <account by="name">${domain1.user.name}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DelegateAuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="DelegateAuth_Rights_03" type="smoke" >
    <t:objective>Verify the domain admin cannot get a delegate auth token for a global admin</t:objective>
    <t:steps> 
		1. Login to domain admin account 
		2. DelegateAuthRequest for global admin (PERM_DENIED)
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${domain1.admin.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${domain1.admin.name}</name>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="delegateAuthRequest1a">
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin">
                <account by="name">${admin.user}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.PERM_DENIED$"/>
        </t:response>
    </t:test>


</t:test_case>

<t:test_case testcaseid="DelegateAuth_Rights_04" type="smoke" >
    <t:objective>Verify the domain admin cannot get a delegate auth token for another domain admin</t:objective>
    <t:steps> 
		1. Login to domain admin account 
		2. DelegateAuthRequest for domain2 admin (PERM_DENIED)
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${domain1.admin.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${domain1.admin.name}</name>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="delegateAuthRequest1a">
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin">
                <account by="name">${domain2.admin.name}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.PERM_DENIED$"/>
        </t:response>
    </t:test>


</t:test_case>

<t:test_case testcaseid="DelegateAuth_Rights_05" type="smoke" >
    <t:objective>Verify the domain admin cannot get a delegate auth token for another domain user</t:objective>
    <t:steps> 
		1. Login to domain admin account 
		2. DelegateAuthRequest for domain2 user (PERM_DENIED)
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${domain1.admin.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${domain1.admin.name}</name>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="delegateAuthRequest1a">
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin">
                <account by="name">${domain2.user.name}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.PERM_DENIED$"/>
        </t:response>
    </t:test>


</t:test_case>
<!-- Poonam: Main doesnot support domainadmin -->
<t:test_case testcaseid="DelegateAuth_Rights_06" type="deprecated" >
    <t:objective>Verify the domain admin can get a delegate auth token for a domain user</t:objective>
    <t:steps> 
		1. Login to domain admin account 
		2. DelegateAuthRequest for domain user
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${domain1.admin.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${domain1.admin.name}</name>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="delegateAuthRequest1a">
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin">
                <account by="name">${domain1.user.name}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DelegateAuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="DelegateAuth_Rights_07" type="smoke" bugids="18418">
    <t:objective>Verify the domain user cannot get a delegate auth token for a global admin</t:objective>
    <t:steps> 
		1. Login to domain user account 
		2. DelegateAuthRequest for global admin (PERM_DENIED)
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${domain1.user.server}"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${domain1.user.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test id="delegateAuthRequest1a">
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin">
                <account by="name">${admin.user}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.PERM_DENIED$"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="DelegateAuth_Rights_08" type="smoke" >
    <t:objective>Verify the domain user cannot get a delegate auth token for a domain admin</t:objective>
    <t:steps> 
		1. Login to domain user account 
		2. DelegateAuthRequest for domain admin (PERM_DENIED)
		2. DelegateAuthRequest for domain2 admin (PERM_DENIED)
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${domain1.user.server}"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${domain1.user.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test id="delegateAuthRequest1a">
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin">
                <account by="name">${domain1.admin.name}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.PERM_DENIED$"/>
        </t:response>
    </t:test>

    <t:test id="delegateAuthRequest1a">
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin">
                <account by="name">${domain2.admin.name}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.PERM_DENIED$"/>
        </t:response>
    </t:test>


</t:test_case>

<t:test_case testcaseid="DelegateAuth_Rights_09" type="smoke" >
    <t:objective>Verify the domain user cannot get a delegate auth token for another domain user</t:objective>
    <t:steps> 
		1. Login to domain user account 
		2. DelegateAuthRequest for domain2 user (PERM_DENIED)
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${domain1.user.server}"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${domain1.user.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test id="delegateAuthRequest1a">
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin">
                <account by="name">${domain2.user.name}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.PERM_DENIED$"/>
        </t:response>
    </t:test>


</t:test_case>

<t:test_case testcaseid="DelegateAuth_Rights_10" type="smoke" >
    <t:objective>Verify the domain user cannot get a delegate auth token for himself</t:objective>
    <t:steps> 
		1. Login to domain user account 
		2. DelegateAuthRequest for domain2 user (PERM_DENIED)
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${domain1.user.server}"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${domain1.user.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test id="delegateAuthRequest1a">
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin">
                <account by="name">${domain1.user.name}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.PERM_DENIED$"/>
        </t:response>
    </t:test>


</t:test_case>



</t:tests>


<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>


<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	
    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="DelegateAuth_basic_Account_Setup" type="always">
    <t:objective>Create a test account</t:objective>
    <steps> 1. Login to admin account
            2. Create test_account1 and  test_account2 </steps>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>                
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>                
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>
    
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	<t:property name="server.zimbraMail" value="${account2.server}"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account2.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

    <t:test >
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>              
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="inboxFolder.id"/>
        </t:response>
    </t:test>

	<t:property name="account2.message1.subject" value="Subject.${TIME}.${COUNTER}"/>
	<t:property name="account2.message1.content" value="Content.${TIME}.${COUNTER}"/>

    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${inboxFolder.id}">
                    <content>To: ${account2.name}
From: ${account1.name}
Subject: ${account2.message1.subject}
Date: Tue, 17 Jul 2007 14:30:20 -0500


${account2.message1.content}

					</content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="account2.message1.id"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="DelegateAuth_basic_01" type="smoke" >
    <t:objective>Use DelegateAuthRequest to get an authToken for account1 (by name)</t:objective>
    <t:steps> 1. Login to admin 
              2. Send DelegateAuthRequest by name
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
        
    <t:test >
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin">
                <account by="name">${account1.name}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DelegateAuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

</t:test_case> 

<t:test_case testcaseid="DelegateAuth_basic_02" type="smoke" >
    <t:objective>Use DelegateAuthRequest to get an authToken for account1 (by id)</t:objective>
    <t:steps> 1. Login to admin 
              2. Send DelegateAuthRequest by id
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
        
    <t:test >
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin">
                <account by="id">${account1.id}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DelegateAuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

</t:test_case> 

<t:test_case testcaseid="DelegateAuth_basic_03" type="smoke" >
    <t:objective>Use DelegateAuthRequest to get an authToken for account1 (with lifetime)</t:objective>
    <t:steps> 1. Login to admin 
              2. Send DelegateAuthRequest with a lifetime (in seconds).
              3. Verify the DelegateAuthResponse has the lifetime (in milliseconds)
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
        
    <t:test >
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin" duration="3600">
                <account by="id">${account1.id}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DelegateAuthResponse/admin:authToken" set="authToken"/>
            <t:select path="//admin:DelegateAuthResponse/admin:lifetime" match="3600000"/>
        </t:response>
    </t:test>

</t:test_case> 

<t:test_case testcaseid="DelegateAuth_basic_04" type="smoke" >
    <t:objective>Verify the returned authToken is valid for the account</t:objective>
    <t:steps> 1. Login to admin 
              2. Send DelegateAuthRequest 
              3. Use the authToken to search the mailbox
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
        
    <t:test >
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin" duration="3600">
                <account by="id">${account2.id}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DelegateAuthResponse/admin:authToken" set="authToken"/>
            <t:select path="//admin:DelegateAuthResponse/admin:lifetime" match="3600000"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>subject:(${account2.message1.subject})</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:m" attr="su" match="^${account2.message1.subject}$"/>
			</t:select>
		</t:response>
	</t:test>

</t:test_case> 

<t:test_case testcaseid="DelegateAuth_basic_05" type="functional" >
    <t:objective>Verify the returned authToken expires after the lifetime</t:objective>
    <t:steps> 1. Login to admin 
              2. Send DelegateAuthRequest with a lifetime (in seconds).
              3. Wait for the authToken to expire
              4. Run SearchRequest using the authToken, verify AUTH_EXPIRED
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
        
    <t:test >
        <t:request>
            <DelegateAuthRequest xmlns="urn:zimbraAdmin" duration="5">
                <account by="id">${account1.id}</account>
            </DelegateAuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DelegateAuthResponse/admin:authToken" set="authToken"/>
            <t:select path="//admin:DelegateAuthResponse/admin:lifetime" match="5000"/>
        </t:response>
    </t:test>

    <t:delay sec="10"/>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>subject:(subject line text email01G)</query>
			</SearchRequest>
		</t:request>
		<t:response>
            <t:select path="//zimbra:Code" match="^service.AUTH_EXPIRED$"/>
		</t:response>
	</t:test>


</t:test_case> 

</t:tests>


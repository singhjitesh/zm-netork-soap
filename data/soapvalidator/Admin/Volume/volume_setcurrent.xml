<t:tests xmlns:t="urn:zimbraTestHarness">
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
 
<t:property name="compressBlobs_default" value="0"/>
<t:property name="compressionThreshold_default" value="4096"/>

<t:property name="volume.rootpath1" value="/opt/zimbra/store/Volume${TIME}${COUNTER}"/>
<t:property name="volume.rootpath2" value="/opt/zimbra/store/Volume${TIME}${COUNTER}"/>

    
<t:property name="volume.name1" value="Volume${TIME}${COUNTER}"/>
<t:property name="volume.name2" value="Volume${TIME}${COUNTER}"/>
<t:property name="volume.name3" value="Volume${TIME}${COUNTER}"/>
<t:property name="volume.name4" value="Volume${TIME}${COUNTER}"/>

<t:property name="type.primary" value="1"/>
<t:property name="type.secondary" value="2"/>
<t:property name="type.index" value="10"/>

<t:property name="volume.one" value="1"/>
<t:property name="volume.two" value="2"/>
<t:property name="volume.three" value="3"/>
<t:property name="volume.four" value="4"/>
<t:property name="volume.five" value="5"/>
<t:property name="volume.eight" value="8"/>
<t:property name="volume.ten" value="10"/>
<t:property name="volume.twelve" value="12"/>
    
<t:property name="volume.blank" value=""/>
<t:property name="volume.space" value="     "/>
<t:property name="volume.spchar" value="//\\|-'."/>
<t:property name="volume.sometext" value="Some text"/>
<t:property name="volume.negative" value="-1"/>
<t:property name="volume.zero" value="0"/>
<t:property name="volume.largeNumber" value="1112223333"/>
    
<t:property name="tempdir" value="/tmp/volumes"/>
<t:staftask >
	<t:request>
		<server>${zimbraServer.name}</server>
		<service>PROCESS</service>
		<params>START SHELL COMMAND "mkdir -p ${tempdir}" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.default}</params>
	</t:request>
</t:staftask>
<t:staftask >
	<t:request>
		<server>${zimbraServer.name}</server>
		<service>PROCESS</service>
		<params>START SHELL COMMAND "chmod 777 ${tempdir}" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.default}</params>
	</t:request>
</t:staftask>
<t:property name="basedir" value="${tempdir}/volumeRoot${COUNTER}${TIME}"/>
<t:staftask >
	<t:request>
		<server>${zimbraServer.name}</server>
		<service>PROCESS</service>
		<params>START SHELL COMMAND "mkdir -p ${basedir}" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.default}</params>
	</t:request>
</t:staftask>
<t:staftask >
	<t:request>
		<server>${zimbraServer.name}</server>
		<service>PROCESS</service>
		<params>START SHELL COMMAND "chmod 777 ${basedir}" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.default}</params>
	</t:request>
</t:staftask>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup1_volume_setCurrent" type="always">
    <t:objective>Create test account setup</t:objective>
    <t:steps>1. Login to Admin
             2. Create some volume
             3. Get the current volume        
    </t:steps>
 
    <!-- Login to admin -->
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="volume.rootpath1" value="${basedir}/rootpath${COUNTER}${TIME}"/>
	<t:property name="volume.rootpath2" value="${basedir}/rootpath${COUNTER}${TIME}"/>
	<t:property name="volume.rootpath3" value="${basedir}/rootpath${COUNTER}${TIME}"/>
	<t:staftask >
		<t:request>
			<server>${zimbraServer.name}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "mkdir -p ${volume.rootpath1}" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.default}</params>
		</t:request>
	</t:staftask>
	<t:staftask >
		<t:request>
			<server>${zimbraServer.name}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "chmod 777 ${volume.rootpath1}" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.default}</params>
		</t:request>
	</t:staftask>
	<t:staftask >
		<t:request>
			<server>${zimbraServer.name}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "mkdir -p ${volume.rootpath2}" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.default}</params>
		</t:request>
	</t:staftask>
	<t:staftask >
		<t:request>
			<server>${zimbraServer.name}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "chmod 777 ${volume.rootpath2}" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.default}</params>
		</t:request>
	</t:staftask>
	<t:staftask >
		<t:request>
			<server>${zimbraServer.name}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "mkdir -p ${volume.rootpath3}" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.default}</params>
		</t:request>
	</t:staftask>
	<t:staftask >
		<t:request>
			<server>${zimbraServer.name}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "chmod 777 ${volume.rootpath3}" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.default}</params>
		</t:request>
	</t:staftask>

    <t:test required="true">
        <t:request>
            <CreateVolumeRequest xmlns="urn:zimbraAdmin">
                <volume type="${volume.one}" name="${volume.name1}" rootpath="${volume.rootpath1}" mgbits="${volume.eight}" mbits="${volume.twelve}" fgbits="${volume.eight}" fbits="${volume.twelve}" compressBlobs="${compressBlobs_default}" compressionThreshold="${compressionThreshold_default}"/>
            </CreateVolumeRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateVolumeResponse/admin:volume" attr="id" set="volume1.id"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateVolumeRequest xmlns="urn:zimbraAdmin">
                <volume type="${volume.ten}" name="${volume.name2}" rootpath="${volume.rootpath2}" mgbits="${volume.eight}" mbits="${volume.twelve}" fgbits="${volume.eight}" fbits="${volume.twelve}" compressBlobs="${compressBlobs_default}" compressionThreshold="${compressionThreshold_default}"/>
            </CreateVolumeRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateVolumeResponse/admin:volume" attr="id" set="volume2.id"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateVolumeRequest xmlns="urn:zimbraAdmin">
                <volume type="${volume.ten}" name="${volume.name3}" rootpath="${volume.rootpath3}" mgbits="${volume.eight}" mbits="${volume.twelve}" fgbits="${volume.eight}" fbits="${volume.twelve}" compressBlobs="${compressBlobs_default}" compressionThreshold="${compressionThreshold_default}"/>
            </CreateVolumeRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateVolumeResponse/admin:volume" attr="id" set="volume3.id"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <GetCurrentVolumesRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:GetCurrentVolumesResponse/admin:volume[@type='${type.primary}']" attr="id" set="primary.id"/>
            <t:select path="//admin:GetCurrentVolumesResponse/admin:volume[@type='${type.index}']" attr="id" set="index.id"/>            
        </t:response>
    </t:test>

</t:test_case>
       

<t:test_case testcaseid="SetCurrentVolumeRequest1" type="smoke">
    <t:objective>Set current volumes </t:objective>

    <t:test id="setCurrentVolumesRequest1a">
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"  type="${type.primary}" id="${volume1.id}"/>            
        </t:request>
        <t:response>
            <t:select path="//admin:SetCurrentVolumeResponse"/>
        </t:response>
    </t:test>

    <t:test id="setCurrentVolumesRequest1b">
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"  type="${type.index}" id="${volume2.id}"/>
        </t:request>
        <t:response>
            <t:select path="//admin:SetCurrentVolumeResponse"/>
        </t:response>
    </t:test>

    <t:test depends="setCurrentVolumesRequest1a,setCurrentVolumesRequest1b">
        <t:request>
            <GetCurrentVolumesRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:GetCurrentVolumesResponse/admin:volume[@type='${type.primary}']" attr="id" match="${volume1.id}"/>
            <t:select path="//admin:GetCurrentVolumesResponse/admin:volume[@type='${type.index}']" attr="id" match="${volume2.id}"/>
        </t:response>
    </t:test>
    
</t:test_case>
    

<t:test_case testcaseid="SetCurrentVolumeRequest2" type="negative">
    <t:objective>Set the deleted volume  as current volume </t:objective>
    <t:steps>1. Delete the volume
             2. Set the deleted volume as current volume        
    </t:steps>
    
    <t:test id="getCurrentVolumesRequest2a">
        <t:request>
            <DeleteVolumeRequest xmlns="urn:zimbraAdmin"  id="${volume3.id}"/>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteVolumeResponse"/>
        </t:response>
    </t:test>
    
    <t:test depends="getCurrentVolumesRequest2a">
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin" id="${volume3.id}"  type="type.primary"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="service.INVALID_REQUEST"/>
        </t:response>
    </t:test>
    
</t:test_case>  
    
    
<t:test_case testcaseid="SetCurrentVolumeRequest3" type="negative">
    <t:objective>SetCurrentVolumeRequest without type attribute </t:objective>
    
    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"   id="${volume1.id}"/>            
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="service.INVALID_REQUEST"/>
        </t:response>
    </t:test>
    
</t:test_case>
    
    
<t:test_case testcaseid="SetCurrentVolumeRequest4" type="negative">
    <t:objective>SetCurrentVolumeRequest without id attribute </t:objective>
    
    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"   type="type.primary"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="service.INVALID_REQUEST"/>
        </t:response>
    </t:test>
    
</t:test_case>   
 
 
<t:test_case testcaseid="SetCurrentVolumeRequest5" type="negative">
    <t:objective>SetCurrentVolumeRequest without invalid numeric values for type (zero/negative/largenumber)</t:objective>
    
    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"   type="${volume.zero}" id="${volume1.id}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="volume.INVALID_REQUEST"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"   type="${volume.negative}" id="${volume1.id}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="volume.INVALID_REQUEST"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"   type="${volume.largeNumber}" id="${volume1.id}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="volume.INVALID_REQUEST"/>
        </t:response>
    </t:test>
    
</t:test_case>
 

<t:test_case testcaseid="SetCurrentVolumeRequest6" type="negative">
    <t:objective>SetCurrentVolumeRequest without invalid non-numeric values for type (space/blank/sometext/special character)</t:objective>
    
    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"   type="${volume.space}" id="${volume1.id}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="service.INVALID_REQUEST"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"   type="${volume.blank}" id="${volume1.id}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="service.INVALID_REQUEST"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"   type="${volume.sometext}" id="${volume1.id}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="service.INVALID_REQUEST"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"   type="${volume.spchar}" id="${volume1.id}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="service.INVALID_REQUEST"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="SetCurrentVolumeRequest7" type="negative">
    <t:objective>SetCurrentVolumeRequest without invalid numeric values for id (zero/negative/largenumber)</t:objective>

    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin" id="${volume.zero}" type="${type.primary}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="volume.INVALID_REQUEST"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin" id="${volume.negative}" type="${type.primary}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="volume.NO_SUCH_VOLUME"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin" id="${volume.largeNumber}" type="${type.primary}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="volume.INVALID_REQUEST"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="SetCurrentVolumeRequest8" type="negative">
    <t:objective>SetCurrentVolumeRequest without invalid non-numeric values for id (space/blank/sometext/special character)</t:objective>

    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin" id="${volume.space}" type="${type.primary}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="service.INVALID_REQUEST"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"  id="${volume.blank}" type="${type.primary}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="service.INVALID_REQUEST"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"  id="${volume.sometext}" type="${type.primary}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="service.INVALID_REQUEST"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin" id="${volume.spchar}" type="${type.primary}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="service.INVALID_REQUEST"/>
        </t:response>
    </t:test>
    
</t:test_case>
    

<t:test_case testcaseid="SetCurrentVolumeRequest9" type="functional">
    <t:objective>Delete the current volume </t:objective>    
    
    <t:test depends="setCurrentVolumesRequest1a">
        <t:request>
            <DeleteVolumeRequest xmlns="urn:zimbraAdmin"  id="${volume1.id}"/>
        </t:request>
        <t:response>
            <t:select path="//soap:Fault/soap:Detail/zimbra:Error/zimbra:Code" match="volume.CANNOT_DELETE_CURRVOL"/>
        </t:response>
    </t:test>
    
</t:test_case>  
    
    
<t:test_case testcaseid="acctSetup2_volume_setCurrent" type="always">
    <t:objective>Restore the previous volume </t:objective>

    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"  type="${type.primary}" id="${primary.id}"/>
        </t:request>
        <t:response>
            <t:select path="//admin:SetCurrentVolumeResponse"/>            
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SetCurrentVolumeRequest xmlns="urn:zimbraAdmin"  type="${type.index}" id="${index.id}"/>
        </t:request>
        <t:response>
            <t:select path="//admin:SetCurrentVolumeResponse"/>
        </t:response>
    </t:test>
    
</t:test_case>

</t:tests>



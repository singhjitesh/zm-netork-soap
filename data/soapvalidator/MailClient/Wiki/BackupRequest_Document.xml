<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="account1.name" value="wiki.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.wiki1.name" value="wiki.${TIME}.${COUNTER}"/>
<t:property name="account1.wiki1.pagename" value="wiki1.${TIME}.${COUNTER}"/>
<t:property name="account1.wiki1.contents" value="Now is the time for all good men to come to the aid of their country."/>


<t:property name="account2.name" value="wiki.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.wiki1.pagename" value="wiki1.${TIME}.${COUNTER}"/>
<t:property name="account2.wiki1.contents" value="All work and no play makes Jack a dull boy."/>
<t:property name="account2.wiki2.pagename" value="wiki2.${TIME}.${COUNTER}"/>
<t:property name="account2.wiki2.contents" value="All work and no play makes Casper an unfriendly ghost."/>

<t:property name="account3.name" value="wiki.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.wiki1.pagename" value="wiki1.${TIME}.${COUNTER}"/>
<t:property name="account3.wiki1.contents" value="All work and no play makes Jack a dull boy."/>

<t:property name="account4.name" value="wiki.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.wiki1.pagename" value="wiki1.${TIME}.${COUNTER}"/>
<t:property name="account4.wiki1.contents" value="All work and no play makes Jack a dull boy."/>


<t:test_case testcaseid="Wiki_AccountBackup_Setup" type="deprecated" >
    <t:objective>basic system check</t:objective>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>	
    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

    <t:test  >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraFeatureNotebookEnabled">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>  

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraFeatureNotebookEnabled">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>  

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraFeatureNotebookEnabled">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>  

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account4.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraFeatureNotebookEnabled">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account4.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account4.server"/>
        </t:response>
    </t:test>  

</t:test_case>


<t:test_case testcaseid="Document_AccountBackup_01" type="deprecated" areas="backup,nonappliance" >
    <t:objective>Backup (full) and restore an account with a document.  Verify the document is backed up and restored</t:objective>
    <t:steps>
    1. Create an account with a Document
    2. Backup the account
    3. Delete the account
    4. Restore the account
    5. Verify the document content still exists
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.notebook}']" attr="id" set="wiki.folder.id"/>
		</t:response>
	</t:test>
	
	<t:property name="uploadServletServer" value="${account1.server}"/>
	<t:property name="server.restServlet" value="${account1.server}"/>
	<t:property name="account1.document1.filename" value="${testMailRaw.root}/wiki01/basic.html"/>
	<t:property name="account1.document1.name" value="doc${TIME}${COUNTER}"/>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${account1.document1.filename}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="account1.document1.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

    <t:test >
        <t:request>
			<SaveDocumentRequest xmlns="urn:zimbraMail">
			  <doc l="${wiki.folder.id}" name="${account1.document1.name}">
			    <upload id="${account1.document1.aid}"/>
			  </doc>
			</SaveDocumentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveDocumentResponse">
            	<t:select path="//mail:doc" attr="id" set="account1.document1.id"/>
            </t:select>
        </t:response>
    </t:test>

	<t:resttest>
		<t:restServletRequest>
			<id>${account1.document1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
		</t:restServletResponse>
	</t:resttest>

	<t:property name="server.zimbraAdmin" value="${account1.server}"/>
	<t:property name="account.name" value="${account1.name}"/>
	<t:property name="account.id" value="${account1.id}"/>
	<t:include filename="BackupWorkflowFullDeleteRestore.inc"/> 

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="document">
				<query>inid:(${wiki.folder.id})</query>
			</SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:doc" attr="id" set="account1.document1.id"/>
            </t:select>
        </t:response>
    </t:test>

	<t:resttest>
		<t:restServletRequest>
			<id>${account1.document1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
		</t:restServletResponse>
	</t:resttest>


</t:test_case>


<t:test_case testcaseid="Document_AccountBackup_02" type="deprecated" areas="backup,nonappliance" bugids="22442">
    <t:objective>Backup (incremental) and restore an account with a document.  Verify the document is backed up and restored</t:objective>
    <t:steps>
    1. Create an account with a wiki page
    2. Backup the account
    3. Add a second wiki page
    4. Do incremental backup
    3. Delete the account
    4. Restore the account (no redo logs)
    5. Verify the pages are still present
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.notebook}']" attr="id" set="wiki.folder.id"/>
		</t:response>
	</t:test>
	
	<t:property name="uploadServletServer" value="${account2.server}"/>
	<t:property name="server.restServlet" value="${account2.server}"/>
	<t:property name="account2.document1.filename" value="${testMailRaw.root}/wiki01/basic.html"/>
	<t:property name="account2.document1.name" value="doc${TIME}${COUNTER}"/>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${account2.document1.filename}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="account2.document1.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

    <t:test >
        <t:request>
			<SaveDocumentRequest xmlns="urn:zimbraMail">
			  <doc l="${wiki.folder.id}" name="${account2.document1.name}">
			    <upload id="${account2.document1.aid}"/>
			  </doc>
			</SaveDocumentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveDocumentResponse">
            	<t:select path="//mail:doc" attr="id" set="account2.document1.id"/>
            	<t:select path="//mail:doc" attr="ver" set="account2.document1.ver"/>
            </t:select>
        </t:response>
    </t:test>

	<t:resttest>
		<t:restServletRequest>
			<id>${account2.document1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
		</t:restServletResponse>
	</t:resttest>

	<t:property name="server.zimbraAdmin" value="${account2.server}"/>
	<t:property name="account.name" value="${account2.name}"/>
    <t:include filename="BackupRequestFullBasic.inc"/>
	<t:property name="backup2.label1.id" value="${backup.label}"/>

	<t:property name="uploadServletServer" value="${account2.server}"/>
	<t:property name="server.restServlet" value="${account2.server}"/>
	<t:property name="account2.document2.filename" value="${testMailRaw.root}/wiki01/basic.html"/>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${account2.document2.filename}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="account2.document1.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

    <t:test >
        <t:request>
			<SaveDocumentRequest xmlns="urn:zimbraMail">
			  <doc l="${wiki.folder.id}" name="${account2.document1.name}" ver="${account2.document1.ver}" id="${account2.document1.id}">
			    <upload id="${account2.document1.aid}"/>
			  </doc>
			</SaveDocumentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveDocumentResponse">
            	<t:select path="//mail:doc" attr="id" set="account2.document1.id"/>
            	<t:select path="//mail:doc" attr="id" set="account2.document1.ver"/>
            </t:select>
        </t:response>
    </t:test>

	<t:resttest>
		<t:restServletRequest>
			<id>${account2.document1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
		</t:restServletResponse>
	</t:resttest>

	<t:property name="server.zimbraAdmin" value="${account2.server}"/>
	<t:property name="account.name" value="${account2.name}"/>
	<t:property name="account.id" value="${account2.id}"/>
    <t:include filename="BackupWorkflowIncrementalDeleteRestore.inc"/>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="document">
				<query>inid:(${wiki.folder.id})</query>
			</SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:doc" attr="id" set="account1.document1.id"/>
            </t:select>
        </t:response>
    </t:test>

	<t:resttest>
		<t:restServletRequest>
			<id>${account1.document1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
		</t:restServletResponse>
	</t:resttest>

</t:test_case>

<t:test_case testcaseid="Document_AccountBackup_03" type="deprecated" areas="backup,nonappliance" bugids="21479">
    <t:objective>Backup (incremental) and restore an account with a document.  Verify the document is backed up and restored</t:objective>
    <t:steps>
    1. Create an account with a wiki page
    2. Backup the account
    3. Add a second wiki page
    4. Do incremental backup
    3. Delete the account
    4. Restore the account (no redo logs)
    5. Verify the pages are still present
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.notebook}']" attr="id" set="wiki.folder.id"/>
		</t:response>
	</t:test>
	
	<t:property name="uploadServletServer" value="${account2.server}"/>
	<t:property name="server.restServlet" value="${account2.server}"/>
	<t:property name="account2.document1.filename" value="${testMailRaw.root}/wiki01/basic.html"/>
	<t:property name="account2.document1.name" value="doc${TIME}${COUNTER}"/>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${account2.document1.filename}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="account2.document1.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

    <t:test >
        <t:request>
			<SaveDocumentRequest xmlns="urn:zimbraMail">
			  <doc l="${wiki.folder.id}" name="${account2.document1.name}">
			    <upload id="${account2.document1.aid}"/>
			  </doc>
			</SaveDocumentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveDocumentResponse">
            	<t:select path="//mail:doc" attr="id" set="account2.document1.id"/>
            	<t:select path="//mail:doc" attr="ver" set="account2.document1.ver"/>
            </t:select>
        </t:response>
    </t:test>

	<t:resttest>
		<t:restServletRequest>
			<id>${account2.document1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
		</t:restServletResponse>
	</t:resttest>

	<t:property name="server.zimbraAdmin" value="${account2.server}"/>
	<t:property name="account.name" value="${account2.name}"/>
    <t:include filename="BackupRequestFullBasic.inc"/>
	<t:property name="backup2.label1.id" value="${backup.label}"/>

	<t:property name="uploadServletServer" value="${account2.server}"/>
	<t:property name="server.restServlet" value="${account2.server}"/>
	<t:property name="account2.document2.filename" value="${testMailRaw.root}/wiki01/basic.html"/>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${account2.document2.filename}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="account2.document1.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

    <t:test >
        <t:request>
			<SaveDocumentRequest xmlns="urn:zimbraMail">
			  <doc l="${wiki.folder.id}" name="${account2.document1.name}" ver="${account2.document1.ver}" id="${account2.document1.id}">
			    <upload id="${account2.document1.aid}"/>
			  </doc>
			</SaveDocumentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveDocumentResponse">
            	<t:select path="//mail:doc" attr="id" set="account2.document1.id"/>
            	<t:select path="//mail:doc" attr="id" set="account2.document1.ver"/>
            </t:select>
        </t:response>
    </t:test>

	<t:resttest>
		<t:restServletRequest>
			<id>${account2.document1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
		</t:restServletResponse>
	</t:resttest>

	<t:property name="server.zimbraAdmin" value="${account2.server}"/>
	<t:property name="account.name" value="${account2.name}"/>
	<t:property name="account.id" value="${account2.id}"/>
    <t:include filename="BackupWorkflowIncrementalDeleteRestore.inc"/>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="document">
				<query>inid:(${wiki.folder.id})</query>
			</SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:doc" attr="id" set="account1.document1.id"/>
            </t:select>
        </t:response>
    </t:test>

	<t:resttest>
		<t:restServletRequest>
			<id>${account1.document1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
		</t:restServletResponse>
	</t:resttest>

</t:test_case>


</t:tests>


<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="account1.name" value="wiki.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.wiki1.name" value="wiki.${TIME}.${COUNTER}"/>
<t:property name="account1.wiki1.pagename" value="wiki1.${TIME}.${COUNTER}"/>
<t:property name="account1.wiki1.contents" value="Now is the time for all good men to come to the aid of their country."/>


<t:property name="account2.name" value="wiki.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.wiki1.pagename" value="wiki1.${TIME}.${COUNTER}"/>
<t:property name="account2.wiki1.contents" value="All work and no play makes Jack a dull boy."/>
<t:property name="account2.wiki2.pagename" value="wiki2.${TIME}.${COUNTER}"/>
<t:property name="account2.wiki2.contents" value="All work and no play makes Casper an unfriendly ghost."/>

<t:property name="account3.name" value="wiki.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.wiki1.pagename" value="wiki1.${TIME}.${COUNTER}"/>
<t:property name="account3.wiki1.contents" value="All work and no play makes Jack a dull boy."/>

<t:property name="account4.name" value="wiki.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.wiki1.pagename" value="wiki1.${TIME}.${COUNTER}"/>
<t:property name="account4.wiki1.contents" value="All work and no play makes Jack a dull boy."/>

<t:property name="account5.name" value="wiki.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account6.name" value="wiki.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:test_case testcaseid="Wiki_AccountBackup_Setup" type="deprecated" >
    <t:objective>basic system check</t:objective>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>	
    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

    <t:test  >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraFeatureNotebookEnabled">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>  

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraFeatureNotebookEnabled">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>  

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraFeatureNotebookEnabled">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>  

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account4.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraFeatureNotebookEnabled">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account4.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account4.server"/>
        </t:response>
    </t:test>  

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account5.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraFeatureNotebookEnabled">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account5.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account5.server"/>
        </t:response>
    </t:test>  

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account6.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraFeatureNotebookEnabled">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account6.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account6.server"/>
        </t:response>
    </t:test>  

</t:test_case>


<t:test_case testcaseid="Wiki_AccountBackup_01" type="deprecated" areas="backup,nonappliance" bugids="8280">
    <t:objective>Backup (full) and restore an account with a wiki page.  Verify the wiki page is backed up and restored</t:objective>
    <t:steps>
    1. Create an account with a wiki page
    2. Backup the account
    3. Delete the account
    4. Restore the account
    5. Verify the Foreign Principal is still set
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.notebook}']" attr="id" set="wiki.folder.id"/>
		</t:response>
	</t:test>
	
    <t:test >
        <t:request>
			<SaveWikiRequest xmlns="urn:zimbraMail">
			  <w name="${account1.wiki1.pagename}" l="${wiki.folder.id}">${account1.wiki1.contents}</w>
			</SaveWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="id" set="account1.wiki1.id"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAdmin" value="${account1.server}"/>
	<t:property name="account.name" value="${account1.name}"/>
	<t:property name="account.id" value="${account1.id}"/>
	<t:include filename="BackupWorkflowFullDeleteRestore.inc"/> 

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<GetWikiRequest xmlns="urn:zimbraMail">
				<w id="${account1.wiki1.id}"/>
			</GetWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetWikiResponse/mail:w">
				<t:select attr="fr" match="^${account1.wiki1.contents}$"/>
				<t:select attr="body" match="${account1.wiki1.contents}"/>
           </t:select>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Wiki_AccountBackup_02" type="deprecated" areas="backup,nonappliance" bugids="8280">
    <t:objective>Backup (incremental) and restore an account with a wiki page.  Verify the wiki page is backed up and restored</t:objective>
    <t:steps>
    1. Create an account with a wiki page
    2. Backup the account
    3. Add a second wiki page
    4. Do incremental backup
    3. Delete the account
    4. Restore the account (no redo logs)
    5. Verify the pages are still present
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.notebook}']" attr="id" set="wiki.folder.id"/>
		</t:response>
	</t:test>
	
    <t:test >
        <t:request>
			<SaveWikiRequest xmlns="urn:zimbraMail">
			  <w name="${account2.wiki1.pagename}" l="${wiki.folder.id}">${account2.wiki1.contents}</w>
			</SaveWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="id" set="account2.wiki1.id"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAdmin" value="${account2.server}"/>
	<t:property name="account.name" value="${account2.name}"/>
    <t:include filename="BackupRequestFullBasic.inc"/>
	<t:property name="backup2.label1.id" value="${backup.label}"/>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.notebook}']" attr="id" set="wiki.folder.id"/>
		</t:response>
	</t:test>
	
    <t:test >
        <t:request>
			<SaveWikiRequest xmlns="urn:zimbraMail">
			  <w name="${account2.wiki2.pagename}" l="${wiki.folder.id}">${account2.wiki2.contents}</w>
			</SaveWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="id" set="account2.wiki2.id"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAdmin" value="${account2.server}"/>
	<t:property name="account.name" value="${account2.name}"/>
	<t:property name="account.id" value="${account2.id}"/>
    <t:include filename="BackupWorkflowIncrementalDeleteRestore.inc"/>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<GetWikiRequest xmlns="urn:zimbraMail">
				<w name="${account2.wiki1.pagename}" l="${wiki.folder.id}"/>
			</GetWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetWikiResponse/mail:w">
				<t:select attr="fr" match="^${account2.wiki1.contents}$"/>
				<!--t:select attr="body" match="${account2.wiki1.contents}"/-->
           </t:select>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<GetWikiRequest xmlns="urn:zimbraMail">
				<w name="${account2.wiki2.pagename}" l="${wiki.folder.id}"/>
			</GetWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetWikiResponse/mail:w">
				<t:select attr="fr" match="^${account2.wiki2.contents}$"/>
				<!--t:select attr="body" match="${account2.wiki2.contents}"/-->
           </t:select>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Wiki_AccountBackup_03" type="deprecated" areas="backup,nonappliance" bugids="9801">
    <t:objective>Backup (incremental) and restore an account with a wiki page.  Verify the wiki body is returned</t:objective>
    <t:steps>
    1. Create an account
    2. Backup the account
    3. Add a wiki page
    4. Do incremental backup
    3. Delete the account
    4. Restore the account (no redo logs)
    5. Verify the body attribute appears in the GetWikiRequest
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account3.server}"/>
	
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>


	<t:property name="server.zimbraAdmin" value="${account3.server}"/>
	<t:property name="account.name" value="${account3.name}"/>
    <t:include filename="BackupRequestFullBasic.inc"/>
	<t:property name="backup2.label1.id" value="${backup.label}"/>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	<t:property name="server.zimbraAccount" value="${account3.server}"/>
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.notebook}']" attr="id" set="wiki.folder.id"/>
		</t:response>
	</t:test>
	
    <t:test >
        <t:request>
			<SaveWikiRequest xmlns="urn:zimbraMail">
			  <w name="${account3.wiki1.pagename}" l="${wiki.folder.id}">${account3.wiki1.contents}</w>
			</SaveWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="id" set="account3.wiki1.id"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<GetWikiRequest xmlns="urn:zimbraMail">
				<w name="${account3.wiki1.pagename}" l="${wiki.folder.id}"/>
			</GetWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetWikiResponse/mail:w">
				<t:select attr="fr" match="^${account3.wiki1.contents}$"/>
				<t:select attr="body" match="${account3.wiki1.contents}"/>
           </t:select>
        </t:response>
    </t:test>


	<t:property name="server.zimbraAdmin" value="${account3.server}"/>
	<t:property name="account.name" value="${account3.name}"/>
	<t:property name="account.id" value="${account3.id}"/>
    <t:include filename="BackupWorkflowIncrementalDeleteRestore.inc"/>

	<t:property name="server.zimbraAccount" value="${account3.server}"/>
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<GetWikiRequest xmlns="urn:zimbraMail">
				<w name="${account3.wiki1.pagename}" l="${wiki.folder.id}"/>
			</GetWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetWikiResponse/mail:w">
				<t:select attr="fr" match="^${account3.wiki1.contents}$"/>
				<t:select attr="body" match="${account3.wiki1.contents}"/>
           </t:select>
        </t:response>
    </t:test>


</t:test_case>


<t:test_case testcaseid="Wiki_AccountBackup_04" type="deprecated" areas="backup,nonappliance" bugids="17170, 21344">
    <t:objective>Verify we can restor multiple versions of pages </t:objective>
    <t:steps>
    1.  Create an account
	2.  Create a wiki page in the account (version 1)
	3.  Resave the wiki page (version 2)
	4.  Delete/Restore (BackupWorkflowFullDeleteRestore.inc)
	5.  Login to the account
	6.  Get version 1 of the wiki page
	7.  Get version 2 of the wiki page
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account4.server}"/>
	<t:property name="wiki1.version1.content" value="content ${TIME} ${COUNTER}"/>
	<t:property name="wiki1.version2.content" value="${wiki1.version1.content}.This is the modified version"/>


    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account4.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.notebook}']" attr="id" set="wiki.folder.id"/>
		</t:response>
	</t:test>
	
    <t:test >
        <t:request>
			<SaveWikiRequest xmlns="urn:zimbraMail">
			  <w name="${account4.wiki1.pagename}" l="${wiki.folder.id}">${wiki1.version1.content}</w>
			</SaveWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="id" set="account4.wiki1.id"/>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="ver" set="account4.wiki1.ver1"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<SaveWikiRequest xmlns="urn:zimbraMail">
			  <w name="${account4.wiki1.pagename}" id="${account4.wiki1.id}" l="${wiki.folder.id}" ver="${account4.wiki1.ver1}">${wiki1.version2.content}</w>
			</SaveWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="id" set="account4.wiki1.id"/>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="ver" match="^2$"/>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="ver" set="account4.wiki1.ver2"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAdmin" value="${account4.server}"/>
	<t:property name="account.name" value="${account4.name}"/>
    <t:include filename="BackupWorkflowFullDeleteRestore.inc"/>

	<t:property name="server.zimbraAccount" value="${account4.server}"/>
	
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account4.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>


    <t:test >
        <t:request>
			<GetWikiRequest xmlns="urn:zimbraMail">
				<w id="${account4.wiki1.id}" ver="${account4.wiki1.ver1}"/>
			</GetWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetWikiResponse/mail:w" attr="id" match="${account4.wiki1.id}"/>
            <t:select path="//mail:GetWikiResponse/mail:w" attr="name" match="${account4.wiki1.pagename}"/>
            <t:select path="//mail:GetWikiResponse/mail:w" attr="ver" match="${account4.wiki1.ver1}"/>
			<t:select path="//mail:GetWikiResponse/mail:w" attr="fr" match="^${wiki1.version1.content}.*"/>
			<t:select path="//mail:GetWikiResponse/mail:w"  attr="body" match="${wiki1.version1.content}"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<GetWikiRequest xmlns="urn:zimbraMail">
				<w id="${account4.wiki1.id}" ver="${account4.wiki1.ver2}"/>
			</GetWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetWikiResponse/mail:w" attr="id" match="${account4.wiki1.id}"/>
            <t:select path="//mail:GetWikiResponse/mail:w" attr="name" match="${account4.wiki1.pagename}"/>
            <t:select path="//mail:GetWikiResponse/mail:w" attr="ver" match="${account4.wiki1.ver2}"/>
			<t:select path="//mail:GetWikiResponse/mail:w" attr="fr" match="^${wiki1.version2.content}.*"/>
			<t:select path="//mail:GetWikiResponse/mail:w"  attr="body" match="${wiki1.version2.content}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Wiki_AccountBackup_05" type="deprecated" areas="backup,nonappliance" bugids="33798">
    <t:objective>Backup (full) and restore an account with wiki including a document.  Verify the document is backed up and restored</t:objective>
    <t:steps>
    1. Create an account with a wiki page
    2. Add a document to the wiki page
    3. Backup the account
    3. Delete the account
    4. Restore the account (no redo logs)
    5. Verify the document is still present in the wiki
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account5.server}"/>
	
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account5.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.notebook}']" attr="id" set="wiki.folder.id"/>
		</t:response>
	</t:test>
	
	<t:property name="uploadServletServer" value="${account5.server}"/>
	<t:property name="server.restServlet" value="${account5.server}"/>
	<t:property name="account5.document1.filename" value="${testMailRaw.root}/photos/Picture1.jpg"/>
	<t:property name="account5.wiki1.name" value="name${TIME}${COUNTER}"/>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${account5.document1.filename}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="account5.document1.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

    <t:test >
        <t:request>
			<SaveDocumentRequest xmlns="urn:zimbraMail">
			  <doc l="${wiki.folder.id}" >
			    <upload id="${account5.document1.aid}"/>
			  </doc>
			</SaveDocumentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveDocumentResponse">
            	<t:select path="//mail:doc" attr="id" set="account5.document1.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test >
		<t:request>
			<SaveWikiRequest xmlns="urn:zimbraMail">
				<w name="${account5.wiki1.name}" l="${wiki.folder.id}">
&lt;P>test&lt;/P>
&lt;P>&lt;IMG src="${account5.document1.rest}">
&lt;P>test&lt;/P>
				</w>
			</SaveWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="id" set="account5.wiki1.id"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<GetWikiRequest xmlns="urn:zimbraMail">
				<w id="${account5.wiki1.id}"/>
			</GetWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetWikiResponse/mail:w"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAdmin" value="${account5.server}"/>
	<t:property name="account.name" value="${account5.name}"/>
	<t:property name="account.id" value="${account5.id}"/>
	<t:include filename="BackupWorkflowFullDeleteRestore.inc"/> 

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	<t:property name="server.zimbraAccount" value="${account5.server}"/>
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account5.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<GetWikiRequest xmlns="urn:zimbraMail">
				<w id="${account5.wiki1.id}"/>
			</GetWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetWikiResponse/mail:w"/>
        </t:response>
    </t:test>

	<t:property name="server.restServlet" value="${account5.server}"/>
	
	<t:resttest>
		<t:restServletRequest>
			<folder>Notebook/Picture1.jpg</folder>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
		</t:restServletResponse>
	</t:resttest>



</t:test_case>

<t:test_case testcaseid="Wiki_AccountBackup_06" type="deprecated" areas="backup,nonappliance" bugids="21479">
    <t:objective>Backup (full) and restore an account with wiki including a document.  Verify the document is backed up and restored</t:objective>
    <t:steps>
    1. Create an account with a wiki page
    2. Add a document to the wiki page
    3. Backup the account
    3. Delete the account
    4. Restore the account (no redo logs) to a new label
    5. Verify the document is still present in the wiki
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account6.server}"/>
	<t:property name="restore.prefix" value="restore_"/>
	
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account6.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.notebook}']" attr="id" set="wiki.folder.id"/>
		</t:response>
	</t:test>
	
	<t:property name="uploadServletServer" value="${account6.server}"/>
	<t:property name="server.restServlet" value="${account6.server}"/>
	<t:property name="account6.document1.filename" value="${testMailRaw.root}/photos/Picture1.jpg"/>
	<t:property name="account6.wiki1.name" value="name${TIME}${COUNTER}"/>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${account6.document1.filename}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="account6.document1.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

    <t:test >
        <t:request>
			<SaveDocumentRequest xmlns="urn:zimbraMail">
			  <doc l="${wiki.folder.id}" >
			    <upload id="${account6.document1.aid}"/>
			  </doc>
			</SaveDocumentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveDocumentResponse">
            	<t:select path="//mail:doc" attr="id" set="account6.document1.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test >
		<t:request>
			<SaveWikiRequest xmlns="urn:zimbraMail">
				<w name="${account6.wiki1.name}" l="${wiki.folder.id}">
&lt;P>test&lt;/P>
&lt;P>&lt;IMG src="${account6.document1.rest}">
&lt;P>test&lt;/P>
				</w>
			</SaveWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="id" set="account6.wiki1.id"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<GetWikiRequest xmlns="urn:zimbraMail">
				<w id="${account6.wiki1.id}"/>
			</GetWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetWikiResponse/mail:w"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

	<t:test  >
	    <t:request>
	        <AuthRequest xmlns="urn:zimbraAdmin">
	            <name>${admin.user}</name>
	            <password>${admin.password}</password>
	        </AuthRequest>
	    </t:request>
	    <t:response>
	        <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
	    </t:response>
	</t:test>


	<t:test >
	    <t:request>
	        <BackupRequest xmlns="urn:zimbraAdmin">
	            <backup method="full" sync="1" target="/opt/zimbra/backup" >
	                <account name="${account6.name}"/>
	            </backup>
	        </BackupRequest>
	    </t:request>
	    <t:response>
	        <t:select path="//admin:BackupResponse/admin:backup" attr="label" set="backup.label"/>
	    </t:response>
	</t:test>

    <t:test >
        <t:request>
            <DeleteAccountRequest xmlns="urn:zimbraAdmin">
                <id>${account6.id}</id>
            </DeleteAccountRequest>
        </t:request>
        <t:response>
			<t:select path="//admin:DeleteAccountResponse" />
        </t:response>
    </t:test>

	<t:property name="restore.label" value="${backup.label}"/>

	<t:test>
	    <t:request>
	        <RestoreRequest xmlns="urn:zimbraAdmin">
	            <restore prefix="${restore.prefix}" includeIncrementals="1" method="ca" replayRedo="0" label="${restore.label}">
	                <account name="${account6.name}"/>                    
	            </restore>
	        </RestoreRequest>
	    </t:request>
	    <t:response>
			<t:select path="//admin:RestoreResponse"/>
	    </t:response>
	</t:test> 




	<t:property name="server.zimbraAccount" value="${account6.server}"/>
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${restore.prefix}${account6.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<GetWikiRequest xmlns="urn:zimbraMail">
				<w id="${account6.wiki1.id}"/>
			</GetWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetWikiResponse">
            	<t:select path="//mail:body" match="(?s).*restore.*"/>
            </t:select>
        </t:response>
    </t:test>

	<t:property name="server.restServlet" value="${account6.server}"/>
	
	<t:resttest>
		<t:restServletRequest>
			<url>${restore.prefix}${account6.name}/Notebook/Picture1.jpg</url>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
		</t:restServletResponse>
	</t:resttest>



</t:test_case>

</t:tests>


<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="test_account1.name" value="user1_85@zcs85.com"/>
<t:property name="test_account2.name" value="user2_85@zcs85.com"/>
<t:property name="test_account3.name" value="user3_85@zcs85.com"/>
<t:property name="test_account4.name" value="user4_85@zcs85.com"/>
<t:property name="domain_name" value="zcs85.com"/>
<t:property name="alias.name" value="user2alias@zcs85.com"/>
<t:property name="user1_p12" value="${testMailRaw.root}/zcs-85/user1.p12"/>
<t:property name="user2_public_crt" value="${testMailRaw.root}/zcs-85/user2_public.crt"/>

<t:property name="compose.subject.tc1" value="TC1"/>
<t:property name="compose.subject.tc2" value="TC2"/>
<t:property name="compose.subject.tc3" value="TC3"/>
<t:property name="compose.content" value="Content in the message is contents..."/>

<t:property name="password_testcase" value="zimbra"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:property name="test_acct.server" value="NOT_DEFINED"/>

<t:test_case testcaseid="acctSetup1" type="always">
    <t:objective>create test accounts</t:objective>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
           <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
                <a n="zimbraSmimeOCSPEnabled">FALSE</a>
            </ModifyConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyConfigResponse"/>
        </t:response>
    </t:test>
    
    <t:test required="true" >
        <t:request>
          <CreateDomainRequest xmlns="urn:zimbraAdmin">
              <name>${domain_name}</name>
          </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse//admin:domain" attr="id" set="domain1.id"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${defaultpassword.value}</password>
                <a n="zimbraFeatureSMIMEEnabled">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account1.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test> 

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account2.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <AddAccountAliasRequest xmlns="urn:zimbraAdmin">
                <id>${test_account2.id}</id>
                <alias>${alias.name}</alias>
            </AddAccountAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AddAccountAliasResponse"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account3.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct3.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account4.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account4.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct4.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
         <t:request>
          <AuthRequest xmlns="urn:zimbraAccount">
           <account by="name">${test_account1.name}</account>
           <password>${defaultpassword.value}</password>  
           </AuthRequest>
         </t:request>
         <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
         </t:response>
      </t:test>

    <t:property name="uploadServletServer" value="${test_acct1.server}"/>

    <t:uploadservlettest>
        <t:uploadServletRequest>
            <filename>${user1_p12}</filename>
        </t:uploadServletRequest>
        <t:uploadServletResponse>
            <t:select attr="StatusCode" match="200"/>
            <t:select attr="id" set="uploadFileId"/>
        </t:uploadServletResponse>
    </t:uploadservlettest>

    <t:test >
     <t:request>
      <SaveSmimeCertificateRequest xmlns="urn:zimbraAccount">
            <upload id="${uploadFileId}"></upload>
            <password>${password_testcase}</password>
      </SaveSmimeCertificateRequest>
     </t:request>
     <t:response>
         <t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate/acct:emailAddress" match="${test_account1.name}"/>
      </t:response>
    </t:test>

</t:test_case>

<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>

<t:test_case testcaseid="TC1" type="smoke" bugids="ZCS85">
 <t:objective>User1 adds User3 as delegate with right 'sendAs'.
              User3 sends mail to user2.No error should be thrown.
              User3 sends signed mail to user2.Permission denied error should be thrown.
              User3 sends signed and encrypted mail to user2.Permission denied error should be thrown.
 </t:objective>
 
     <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
           <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
        </t:response>
    </t:test>

    <t:test id="GrantRightRequest1" required="true" >
        <t:request>
           <GrantRightRequest xmlns="urn:zimbraAdmin">
              <target by="name" type="account">${test_account1.name}</target>
              <grantee by="name" type="usr">${test_account3.name}</grantee>
              <right>sendAs</right>
           </GrantRightRequest>
        </t:request>
        <t:response>
           <t:select path="//admin:GrantRightResponse"/>
        </t:response>
     </t:test>

    <t:test required="true">
      <t:request>
        <AuthRequest xmlns="urn:zimbraAccount">
            <account by="name">${test_account3.name}</account>
            <password>${defaultpassword.value}</password>
        </AuthRequest>
      </t:request>
      <t:response> 
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
      </t:response>
    </t:test>

    <t:test >
     <t:requestContext>
            <authToken>${authToken}</authToken>
            <account by="id">${test_account1.id}</account>
     </t:requestContext>
     <t:request>
      <SendMsgRequest xmlns="urn:zimbraMail">
        <m>
          <e t="t" a='${test_account2.name}'/>
          <su>${compose.subject.tc1}</su>
          <mp ct="text/plain">
             <content> ${compose.content} </content>
          </mp>
        </m>
      </SendMsgRequest>
     </t:request>
     <t:response>
        <t:select path="//mail:SendMsgResponse"/>
     </t:response>
    </t:test>

    <t:test>
     <t:requestContext>
            <authToken>${authToken}</authToken>
            <account by="id">${test_account1.id}</account>
     </t:requestContext>
     <t:request>
      <SendSecureMsgRequest sign="true" encrypt="false" xmlns="urn:zimbraMail">
        <m>
          <e t="t" a='${test_account2.name}'/>
          <su>${compose.subject.tc1}</su>
          <mp ct="text/plain">
             <content> ${compose.content} </content>
          </mp>
        </m>
      </SendSecureMsgRequest>
     </t:request>
     <t:response>
        <t:select path="//zimbra:Code" match="smime.DELEGATE_SEND_SECURE_PERM_DENIED"/>
     </t:response>
    </t:test>

    <t:test>
     <t:requestContext>
            <authToken>${authToken}</authToken>
            <account by="id">${test_account1.id}</account>
     </t:requestContext>
     <t:request>
      <SendSecureMsgRequest sign="true" encrypt="true" xmlns="urn:zimbraMail">
        <m>
          <e t="t" a='${test_account2.name}'/>
          <su>${compose.subject.tc1}</su>
          <mp ct="text/plain">
             <content> ${compose.content} </content>
          </mp>
        </m>
      </SendSecureMsgRequest>
     </t:request>
     <t:response>
        <t:select path="//zimbra:Code" match="smime.DELEGATE_SEND_SECURE_PERM_DENIED"/>
     </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="TC2" type="smoke" bugids="ZCS85">
 <t:objective>User1 adds User4 as delegate with right 'sendOnBehalfOf'.
              User4 sends mail to user2.No error should be thrown.
              User4 sends signed mail to user2.Permission denied error should be thrown.
              User4 sends signed and encrypted mail to user2.Permission denied error should be thrown.
 </t:objective>

     <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
           <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
        </t:response>
    </t:test>

    <t:test id="GrantRightRequest2" required="true" >
        <t:request>
           <GrantRightRequest xmlns="urn:zimbraAdmin">
              <target by="name" type="account">${test_account1.name}</target>
              <grantee by="name" type="usr">${test_account4.name}</grantee>
              <right>sendOnBehalfOf</right>
           </GrantRightRequest>
        </t:request>
        <t:response>
           <t:select path="//admin:GrantRightResponse"/>
        </t:response>
     </t:test>

    <t:test required="true">
      <t:request>
        <AuthRequest xmlns="urn:zimbraAccount">
            <account by="name">${test_account4.name}</account>
            <password>${defaultpassword.value}</password>
        </AuthRequest>
      </t:request>
      <t:response> 
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
      </t:response>
    </t:test>

    <t:test >
     <t:requestContext>
            <authToken>${authToken}</authToken>
            <account by="id">${test_account1.id}</account>
     </t:requestContext>
     <t:request>
      <SendMsgRequest xmlns="urn:zimbraMail">
        <m>
          <e t="t" a='${test_account2.name}'/>
          <su>${compose.subject.tc2}</su>
          <mp ct="text/plain">
             <content> ${compose.content} </content>
          </mp>
        </m>
      </SendMsgRequest>
     </t:request>
     <t:response>
        <t:select path="//mail:SendMsgResponse"/>
     </t:response>
    </t:test>

    <t:test>
     <t:requestContext>
            <authToken>${authToken}</authToken>
            <account by="id">${test_account1.id}</account>
     </t:requestContext>
     <t:request>
      <SendSecureMsgRequest sign="true" encrypt="false" xmlns="urn:zimbraMail">
        <m>
          <e t="t" a='${test_account2.name}'/>
          <su>${compose.subject.tc2}</su>
          <mp ct="text/plain">
             <content> ${compose.content} </content>
          </mp>
        </m>
      </SendSecureMsgRequest>
     </t:request>
     <t:response>
        <t:select path="//zimbra:Code" match="smime.DELEGATE_SEND_SECURE_PERM_DENIED"/>
     </t:response>
    </t:test>

    <t:test>
     <t:requestContext>
            <authToken>${authToken}</authToken>
            <account by="id">${test_account1.id}</account>
     </t:requestContext>
     <t:request>
      <SendSecureMsgRequest sign="true" encrypt="true" xmlns="urn:zimbraMail">
        <m>
          <e t="t" a='${test_account2.name}'/>
          <su>${compose.subject.tc2}</su>
          <mp ct="text/plain">
             <content> ${compose.content} </content>
          </mp>
        </m>
      </SendSecureMsgRequest>
     </t:request>
     <t:response>
        <t:select path="//zimbra:Code" match="smime.DELEGATE_SEND_SECURE_PERM_DENIED"/>
     </t:response>
    </t:test>
</t:test_case>

<t:test_case testcaseid="TC3" type="smoke" bugids="ZCS85">
 <t:objective>User1 is able to send encrypted mail to User2</t:objective>

    <t:test required="true">
      <t:request>
        <AuthRequest xmlns="urn:zimbraAccount">
            <account by="name">${test_account1.name}</account>
            <password>${defaultpassword.value}</password>
        </AuthRequest>
      </t:request>
      <t:response> 
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
      </t:response>
    </t:test>

		<t:uploadservlettest>
			<t:uploadServletRequest>
				<filename>${user2_public_crt}</filename>
			</t:uploadServletRequest>
			<t:uploadServletResponse>
				<t:select attr="StatusCode" match="200" />
				<t:select attr="id" set="user2_pub.id" />
			</t:uploadServletResponse>
		</t:uploadservlettest>
		
    <t:test>
        <t:request>
            <CreateContactRequest xmlns = "urn:zimbraMail">
                <cn>
                    <a n = "firstName">User</a>
                    <a n = "lastName">Two</a>
                    <a n = "email">${test_account2.name}</a>
                    <a n="userCertificate" aid="${user2_pub.id}" />
                </cn>
            </CreateContactRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:CreateContactResponse/mail:cn">
            <t:select attr = "id" set = "contact1.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test >
     <t:request>
      <SendSecureMsgRequest sign="true" encrypt="true" xmlns="urn:zimbraMail">
        <m>
          <e t="t" a='${test_account2.name}'/>
          <su>${compose.subject.tc3}</su>
          <mp ct="text/plain">
             <content> ${compose.content} </content>
          </mp>
        </m>
      </SendSecureMsgRequest >
     </t:request>
     <t:response>
        <t:select path="//mail:SendSecureMsgResponse"/>
     </t:response>
    </t:test>

	<t:delay sec="10"/>
		
     <t:test required="true">
         <t:request>
          <AuthRequest xmlns="urn:zimbraAccount">
           <account by="name">${test_account2.name}</account>
           <password>${defaultpassword.value}</password>
           </AuthRequest>
         </t:request>
         <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
         </t:response>
      </t:test>

     <t:test>
        <t:request>
           <SearchRequest xmlns="urn:zimbraMail" types="message">
             <query>subject:${compose.subject.tc3}</query>
           </SearchRequest>
       </t:request>
       <t:response>
          <t:select path="//mail:SearchResponse/mail:m/mail:su" match="${compose.subject.tc3}"/>
       </t:response>
    </t:test>

</t:test_case>

<t:finally>
    <t:test id="admin_login" required="true" >
    <t:request>
      <AuthRequest xmlns="urn:zimbraAdmin">
        <name>${admin.user}</name>
        <password>${admin.password}</password>
      </AuthRequest>
     </t:request>
     <t:response>
      <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
      </t:response>
    </t:test>

   <t:test required="false">
     <t:request>
      <DeleteAccountRequest xmlns="urn:zimbraAdmin">
           <id>${test_account1.id}</id>
       </DeleteAccountRequest>
     </t:request>
     <t:response>
        <t:select path="//admin:DeleteAccountResponse"/>
     </t:response>
   </t:test>

   <t:test required="false">
     <t:request>
      <DeleteAccountRequest xmlns="urn:zimbraAdmin">
           <id>${test_account2.id}</id>
       </DeleteAccountRequest>
     </t:request>
     <t:response>
        <t:select path="//admin:DeleteAccountResponse"/>
     </t:response>
   </t:test>

   <t:test required="false">
     <t:request>
      <DeleteAccountRequest xmlns="urn:zimbraAdmin">
           <id>${test_account3.id}</id>
       </DeleteAccountRequest>
     </t:request>
     <t:response>
        <t:select path="//admin:DeleteAccountResponse"/>
     </t:response>
   </t:test>

   <t:test required="false">
     <t:request>
      <DeleteAccountRequest xmlns="urn:zimbraAdmin">
           <id>${test_account4.id}</id>
       </DeleteAccountRequest>
     </t:request>
     <t:response>
        <t:select path="//admin:DeleteAccountResponse"/>
     </t:response>
   </t:test>

    <t:test >
        <t:request>
            <DeleteDomainRequest xmlns="urn:zimbraAdmin">
                <id>${domain1.id}</id>
            </DeleteDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteDomainResponse" />
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
                <a n="zimbraSmimeOCSPEnabled">TRUE</a>
            </ModifyConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyConfigResponse"/>
        </t:response>
    </t:test>
        
    </t:finally>

</t:tests>

<t:tests xmlns:t="urn:zimbraTestHarness">

	<t:property name="test_account1.name" value="user1_107086@bug107086.com" />
	<t:property name="test_account2.name" value="user2_107086@bug107086.com" />
	<t:property name="test_account3.name" value="user3_107086@bug107086.com" />	
	<t:property name="test_account4.name" value="user4_107086@bug107086.com" />
	<t:property name="test_account4.alias" value="user4_alias_107086@bug107086.com" />	
	<t:property name="test_account5.name" value="user5_107086@bug107086.com" />	
	<t:property name="user1_p12" value="${testMailRaw.root}/bug107086/user1.p12" />
	<t:property name="user2_p12" value="${testMailRaw.root}/bug107086/user2.p12" />
	<t:property name="user2_public_crt" value="MIID/zCCAuegAwIBAgIJANz06YJ/rQm8MA0GCSqGSIb3DQEBBQUAMIGHMQswCQYDVQQGEwJJTjELMAkGA1UECBMCTUgxDTALBgNVBAcTBFB1bmUxCzAJBgNVBAsTAlBFMQ8wDQYDVQQKEwZaaW1icmExEzARBgNVBAMTClNtaW1lIFVzZXIxKTAnBgkqhkiG9w0BCQEWGnVzZXIyXzEwNzA4NkBidWcxMDcwODYuY29tMB4XDTE3MDYwMTA5NDQwNFoXDTI3MDUzMDA5NDQwNFowgYcxCzAJBgNVBAYTAklOMQswCQYDVQQIEwJNSDENMAsGA1UEBxMEUHVuZTELMAkGA1UECxMCUEUxDzANBgNVBAoTBlppbWJyYTETMBEGA1UEAxMKU21pbWUgVXNlcjEpMCcGCSqGSIb3DQEJARYadXNlcjJfMTA3MDg2QGJ1ZzEwNzA4Ni5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCncMD+8N44gRSnKkdycssYS4+Tt43kyv+a9XC+cmGiBCNv61x8b23kJtf/G+ZvgK3C+xsWSOcuL7gOvQvU+0CeIybFVlqyjBY+eWES7wxQdwGUm27KwODksM+z0xM9RPT7Dlm2RPYC5Pynrp5Kly6OLArSZB5x7DDTXK4vlrhCjXFjKu08dU8OyZWY/JlOB4TCoJiMtg0saEdecFvUjUomh15+CJH7RmObTIKFcHxjQg/FQDKPp5ZYPuzsuefz+h33kFhFz/S6dBR0BGnjqBqX/V8dSpamfbla9eEFMR0gkOi5RTk1+CiMCMxYK7Cl2V023LqF/8Fr+4DNxImXviXDAgMBAAGjbDBqMAkGA1UdEwQCMAAwCwYDVR0PBAQDAgXgMFAGA1UdEQRJMEeCDmtiLmV4YW1wbGUuY29tghRoZWxwZGVzay5leGFtcGxlLm9yZ4ITc3lzdGVtcy5leGFtcGxlLm5ldIcEwKgBAYcEwKhFDjANBgkqhkiG9w0BAQUFAAOCAQEAZ2UDmGFhyl/PcFDLy77XbQDKVm/Z/zqLsmxqOaXdMNGNePkGx/g7E9++2gA1dSyLN3nKu1CoX+4iL2ruf0IeFRsttMB0kf0AouDTcVoQaf+4jx8W/y25Pz8XDd5Ar/8qK8SaEkVR4iSxA+vEgB4bXhlBd81erfTfADVAtA+lWo0sMsF89GhW5X5ktxq+ztrUWDTa+4rQJLpuzK1N7yu7NhvKum2SmDXqSjiHpt4lQiinwvhpx9RZnJzsbyvllM9gaWclscGz8seXxwndFkJS/pNxE4q650Dsd+359tJHxZFfNZ7I1TUPP61e7jxxC1IoeGY3lgRsj5rV9yxIPWaYcA==" />	
	<t:property name="user3_public_crt" value="${testMailRaw.root}/bug107086/user3_public.crt" />	
	<t:property name="user4_p12" value="${testMailRaw.root}/bug107086/user4.p12" />
	<t:property name="user4_public_alias_crt" value="${testMailRaw.root}/bug107086/user4_public_alias.crt" />	
	<t:property name="user5_public_crt" value="${testMailRaw.root}/bug107086/user5_public.crt" />	
	<t:property name="image_attach" value="${testMailRaw.root}/bug107086/image1.jpg" />
	<t:property name="domain_name" value="bug107086.com" />		
	<t:property name="image_attach" value="${testMailRaw.root}/bug107086/image1.jpg" />
	<t:property name="image1_attach" value="${testMailRaw.root}/bug107086/image2.jpg" />
	<t:property name="compose.subject" value="subject.${COUNTER}.${TIME}" />
	<t:property name="compose.subject1" value="subject.${COUNTER}.${TIME}" />
	<t:property name="compose.subject2" value="subject2.3.1478945979052" />
	<t:property name="compose.subject3" value="subject3.3.1478945979052" />
	<t:property name="compose.subject4" value="subject4.${COUNTER}.${TIME}" />
	<t:property name="compose.subject5" value="subject5.${COUNTER}.${TIME}" />
	<t:property name="compose.subject6" value="subject6.${COUNTER}.${TIME}" />
	<t:property name="compose.subject7" value="subject7.${COUNTER}.${TIME}" />
	<t:property name="compose.subject8" value="subject8.${COUNTER}.${TIME}" />
	<t:property name="compose.subject9" value="subject9.${COUNTER}.${TIME}" />
	<t:property name="compose.subject10" value="subject10.${COUNTER}.${TIME}" />
	<t:property name="compose.content" value="content.${COUNTER}.${TIME}" />
	<t:property name="compose.content1" value="content1.${COUNTER}.${TIME}" />
	<t:property name="compose.content2" value="content2.${COUNTER}.${TIME}" />
	<t:property name="compose.content3" value="content3.${COUNTER}.${TIME}" />
	<t:property name="compose.content4" value="content4.${COUNTER}.${TIME}" />
	<t:property name="compose.content5" value="content5.${COUNTER}.${TIME}" />
	<t:property name="compose.content6" value="content6.${COUNTER}.${TIME}" />
	<t:property name="compose.content7" value="content7.${COUNTER}.${TIME}" />
	<t:property name="compose.content8" value="content8.${COUNTER}.${TIME}" />
	<t:property name="compose.content9" value="content9.${COUNTER}.${TIME}" />
	<t:property name="compose.content10" value="content10.${COUNTER}.${TIME}" />
	<t:property name="compose.subject_mime" value="subject8.7.1479915081948" />
	<!-- values sent in the dummy response -->
	<t:property name="password_testcase1" value="zimbra" />
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}" />
	<t:property name="test_acct.server" value="NOT_DEFINED" />

	<t:test_case testcaseid="Ping" type="always">
		<t:objective>basic system check</t:objective>

		<t:test required="true">
			<t:request>
				<PingRequest xmlns="urn:zimbraAdmin" />
			</t:request>
			<t:response>
				<t:select path="//admin:PingResponse" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="acctSetup1" type="always">
		<t:objective>create test account</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

	    <t:test>
	        <t:request>
	            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
	                <a n="zimbraSmimeOCSPEnabled">FALSE</a>
	            </ModifyConfigRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyConfigResponse"/>
	        </t:response>
	    </t:test>
    
		<t:test required="true">
			<t:request>
				<CreateDomainRequest xmlns="urn:zimbraAdmin">
					<name>${domain_name}</name>
				</CreateDomainRequest>
			</t:request>
			<t:response>
                <t:select path="//admin:CreateDomainResponse//admin:domain" attr="id" set="domain.id" />
            </t:response>			
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account1.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraFeatureSMIMEEnabled">TRUE</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account1.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct1.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account2.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraFeatureSMIMEEnabled">TRUE</a>
					<a n="userCertificate">${user2_public_crt}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account2.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct2.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account3.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraFeatureSMIMEEnabled">TRUE</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account3.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct3.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account4.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraFeatureSMIMEEnabled">TRUE</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account4.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct4.server" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AddAccountAliasRequest xmlns="urn:zimbraAdmin">
					<id>${test_account4.id}</id>
					<alias>${test_account4.alias}</alias>
				</AddAccountAliasRequest>
			</t:request>
			<t:response>
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account5.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraFeatureSMIMEEnabled">TRUE</a>
					<a n="userCertificate">${user2_public_crt}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account5.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct5.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:uploadservlettest>
			<t:uploadServletRequest>
				<filename>${user3_public_crt}</filename>
			</t:uploadServletRequest>
			<t:uploadServletResponse>
				<t:select attr="StatusCode" match="200" />
				<t:select attr="id" set="user3_pub.id" />
			</t:uploadServletResponse>
		</t:uploadservlettest>
		
		<t:test>
			<t:request>
				<CreateContactRequest xmlns="urn:zimbraMail">
					<cn>
						<a n="firstName">first3</a>
						<a n="lastName">last3</a>
						<a n="email">${test_account3.name}</a>
						<a n="userCertificate" aid="${user3_pub.id}" />
					</cn>
				</CreateContactRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateContactResponse/mail:cn">
					<t:select attr="id" set="contact1.id" />
				</t:select>
			</t:response>
		</t:test>

		<t:uploadservlettest>
			<t:uploadServletRequest>
				<filename>${user4_public_alias_crt}</filename>
			</t:uploadServletRequest>
			<t:uploadServletResponse>
				<t:select attr="StatusCode" match="200" />
				<t:select attr="id" set="user4_pub.id" />
			</t:uploadServletResponse>
		</t:uploadservlettest>
		
		<t:test>
			<t:request>
				<CreateContactRequest xmlns="urn:zimbraMail">
					<cn>
						<a n="firstName">first4</a>
						<a n="lastName">last4</a>
						<a n="email">${test_account4.alias}</a>
						<a n="userCertificate" aid="${user4_pub.id}" />
					</cn>
				</CreateContactRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateContactResponse/mail:cn">
					<t:select attr="id" set="contact2.id" />
				</t:select>
			</t:response>
		</t:test>

		<t:uploadservlettest>
			<t:uploadServletRequest>
				<filename>${user5_public_crt}</filename>
			</t:uploadServletRequest>
			<t:uploadServletResponse>
				<t:select attr="StatusCode" match="200" />
				<t:select attr="id" set="user5_pub.id" />
			</t:uploadServletResponse>
		</t:uploadservlettest>

		<t:test>
			<t:request>
				<CreateContactRequest xmlns="urn:zimbraMail">
					<cn>
						<a n="firstName">first5</a>
						<a n="lastName">last5</a>
						<a n="email">${test_account5.name}</a>
						<a n="userCertificate" aid="${user5_pub.id}" />
					</cn>
				</CreateContactRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateContactResponse/mail:cn">
					<t:select attr="id" set="contact3.id" />
				</t:select>
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:property name="server.zimbraAccount" value="${test_acct2.server}" />

	<t:test_case testcaseid="bug107086_SearchConv_Decrypt_test1"
		type="smoke" bugids="107086">
		<t:objective> Verify SearchConvResponse successfully displays
			decrypted message with receipient's private key in conversation view.
		</t:objective>

		<t:property name="uploadServletServer" value="${test_acct2.server}" />

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:uploadservlettest>
			<t:uploadServletRequest>
				<filename>${user1_p12}</filename>
			</t:uploadServletRequest>
			<t:uploadServletResponse>
				<t:select attr="StatusCode" match="200" />
				<t:select attr="id" set="uploadFileId" />
			</t:uploadServletResponse>
		</t:uploadservlettest>

		<t:test>
			<t:request>
				<SaveSmimeCertificateRequest xmlns="urn:zimbraAccount">
					<upload id="${uploadFileId}"></upload>
					<password>${password_testcase1}</password>
				</SaveSmimeCertificateRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate"
					attr="pubCertId" set="pubCertId" />
				<t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate"
					attr="pvtKeyId" set="pvtKeyId" />
				<t:select
					path="//acct:SaveSmimeCertificateResponse/acct:certificate/acct:emailAddress"
					match="${test_account1.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendSecureMsgRequest sign="true" encrypt="true"
					xmlns="urn:zimbraMail">
					<m>
						<e t="t" a='${test_account2.name}' />
						<su>${compose.subject}</su>
						<mp ct="text/plain">
							<content>${compose.content}</content>
						</mp>
					</m>
				</SendSecureMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendSecureMsgResponse" />
			</t:response>
		</t:test>

		<t:delay sec="10"/>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account2.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:uploadservlettest>
			<t:uploadServletRequest>
				<filename>${user2_p12}</filename>
			</t:uploadServletRequest>
			<t:uploadServletResponse>
				<t:select attr="StatusCode" match="200" />
				<t:select attr="id" set="uploadFileId1" />
			</t:uploadServletResponse>
		</t:uploadservlettest>

		<t:test>
			<t:request>
				<SaveSmimeCertificateRequest xmlns="urn:zimbraAccount">
					<upload id="${uploadFileId1}"></upload>
					<password>${password_testcase1}</password>
				</SaveSmimeCertificateRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate"
					attr="pubCertId" set="pubCertId_pn2" />
				<t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate"
					attr="pvtKeyId" set="pvtKeyId_pn2" />
				<t:select
					path="//acct:SaveSmimeCertificateResponse/acct:certificate/acct:emailAddress"
					match="${test_account2.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${compose.subject}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m[1]//mail:su"
					match="${compose.subject}" />
				<t:select path="//mail:SearchResponse/mail:m[1]" attr="cid"
					set="conv.id1" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetConvRequest xmlns="urn:zimbraMail">
					<c id="${conv.id1}" fetch="1" max="10" />
				</GetConvRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:GetConvResponse/mail:c" attr="id"
					match="${conv.id1}" />
				<t:select path="//mail:GetConvResponse/mail:c//mail:su"
					match="${compose.subject}" />
				<t:select path="//mail:GetConvResponse/mail:c/mail:m[1]//mail:mp"
					attr="ct" match="multipart/signed" />
				<t:select path="//mail:GetConvResponse/mail:c/mail:m[1]"
					attr="isSigned" match="true" />

			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id1}"
					sortBy="dateDesc" offset="0" limit="25" fetch="u">
					<query>in:inbox</query>
				</SearchConvRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchConvResponse/mail:m[1]//mail:mp"
					attr="ct" match="multipart/signed" />
				<t:select path="//mail:SearchConvResponse/mail:m[1]" attr="isSigned"
					match="true" />

			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="bug107086_SearchConv_Decrypt_test2"
		type="smoke" bugids="107086">
		<t:objective>Sender sends an encrypted mail to receiver. Receiver
			again forwards the same mail to receiver 2. Verify receiver 2 should
			get the mail in encrypted format and should be able to decrypt it
			using it's private key
		</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendSecureMsgRequest sign="true" encrypt="true"
					xmlns="urn:zimbraMail">
					<m>
						<e t="t" a='${test_account2.name}' />
						<su>${compose.subject1}</su>
						<mp ct="text/html">
							<content>${compose.content1}</content>
						</mp>
					</m>
				</SendSecureMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendSecureMsgResponse" />
			</t:response>
		</t:test>

		<t:delay sec="10"/>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account2.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:uploadservlettest>
			<t:uploadServletRequest>
				<filename>${user4_public_alias_crt}</filename>
			</t:uploadServletRequest>
			<t:uploadServletResponse>
				<t:select attr="StatusCode" match="200" />
				<t:select attr="id" set="user4_pub.id" />
			</t:uploadServletResponse>
		</t:uploadservlettest>
		
		<t:test>
			<t:request>
				<CreateContactRequest xmlns="urn:zimbraMail">
					<cn>
						<a n="firstName">first4</a>
						<a n="lastName">last4</a>
						<a n="email">${test_account4.alias}</a>
						<a n="userCertificate" aid="${user4_pub.id}" />
					</cn>
				</CreateContactRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateContactResponse/mail:cn">
					<t:select attr="id" set="contact5.id" />
				</t:select>
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${compose.subject1}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:su"
					match="${compose.subject1}" />
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg9.id" />
				<t:select path="//mail:SearchResponse/mail:m" attr="cid"
					set="conv.id3" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetConvRequest xmlns="urn:zimbraMail">
					<c id="${conv.id3}" fetch="1" max="10" />
				</GetConvRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:GetConvResponse/mail:c" attr="id"
					match="${conv.id3}" />
				<t:select path="//mail:GetConvResponse/mail:c//mail:su"
					match="${compose.subject1}" />
				<t:select path="//mail:GetConvResponse/mail:c/mail:m[1]//mail:mp"
					attr="ct" match="multipart/signed" />
				<t:select path="//mail:GetConvResponse/mail:c/mail:m[1]"
					attr="isSigned" match="true" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id3}"
					sortBy="dateDesc" offset="0" limit="250" fetch="u">
					<query>in:inbox</query>
				</SearchConvRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchConvResponse/mail:m[1]//mail:mp"
					attr="ct" match="multipart/signed" />
				<t:select path="//mail:SearchConvResponse/mail:m[1]" attr="isSigned"
					match="true" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendSecureMsgRequest xmlns="urn:zimbraMail"
					sign="true" encrypt="true">
					<m origid="${msg9.id}" rt="w">
						<e t="t" a="${test_account4.alias}" />
						<su>${compose.subject2}</su>
						<mp ct="text/plain">
							<content>----- Forwarded Message ----- ${compose.content2}
							</content>
						</mp>
					</m>
				</SendSecureMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendSecureMsgResponse/mail:m" attr="id"
					set="mail01.forward.id" />
			</t:response>
		</t:test>

		<t:delay sec="10"/>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${compose.subject2}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m[1]//mail:su"
					match="${compose.subject2}" />
				<t:select path="//mail:SearchResponse/mail:m[1]" attr="cid"
					set="conv.id4" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id4}"
					sortBy="dateDesc" offset="0" limit="250" fetch="u!">
					<query>in:inbox</query>
				</SearchConvRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchConvResponse/mail:m[1]//mail:su"
					match="${compose.subject2}" />
				<t:select
					path="//mail:SearchConvResponse/mail:m[1]//mail:mp//mail:content"
					contains="${compose.content2}" emptyset="1" />
				<t:select path="//mail:SearchConvResponse/mail:m[2]//mail:su"
					match="${compose.subject1}" />
				<t:select
					path="//mail:SearchConvResponse/mail:m[2]//mail:mp//mail:content"
					contains="${compose.content1}" />
				<t:select path="//mail:SearchConvResponse/mail:m[2]" attr="isSigned"
					match="true" />
				<t:select path="//mail:SearchConvResponse/mail:m[2]" attr="isEncrypted"
					match="true" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account4.alias}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:uploadservlettest>
			<t:uploadServletRequest>
				<filename>${user4_p12}</filename>
			</t:uploadServletRequest>
			<t:uploadServletResponse>
				<t:select attr="StatusCode" match="200" />
				<t:select attr="id" set="uploadFileId" />
			</t:uploadServletResponse>
		</t:uploadservlettest>

		<t:test>
			<t:request>
				<SaveSmimeCertificateRequest xmlns="urn:zimbraAccount">
					<upload id="${uploadFileId}"></upload>
					<password>${password_testcase1}</password>
				</SaveSmimeCertificateRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate"
					attr="pubCertId" set="pubCertId" />
				<t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate"
					attr="pvtKeyId" set="pvtKeyId" />
				<t:select
					path="//acct:SaveSmimeCertificateResponse/acct:certificate/acct:emailAddress"
					match="${test_account4.alias}" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${compose.subject2}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m//mail:su"
					match="${compose.subject2}" />
				<t:select path="//mail:SearchResponse/mail:m" attr="cid"
					set="conv.id5" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetConvRequest xmlns="urn:zimbraMail">
					<c id="${conv.id5}" fetch="1" max="10" />
				</GetConvRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:GetConvResponse/mail:c" attr="id"
					match="${conv.id5}" />
				<t:select path="//mail:GetConvResponse/mail:c//mail:su"
					match="${compose.subject2}" />
				<t:select path="//mail:GetConvResponse//mail:m" attr="isSigned"
					match="true" />
				<t:select path="//mail:GetConvResponse//mail:m" attr="isEncrypted"
					match="true" />
				<t:select path="//mail:GetConvResponse//mail:m//mail:mp"
					attr="ct" match=".*application/pkcs7-signature" />
				<t:select path="//mail:GetConvResponse//mail:m//mail:mp"
					attr="filename" match="smime.p7s" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id5}"
					sortBy="dateDesc" offset="0" limit="250" fetch="u">
					<query>in:inbox</query>
				</SearchConvRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchConvResponse/mail:m" attr="isSigned"
					match="true" />
				<t:select path="//mail:SearchConvResponse/mail:m" attr="isEncrypted"
					match="true" />
				<t:select path="//mail:SearchConvResponse/mail:m//mail:mp"
					attr="ct" match=".*application/pkcs7-signature" />
				<t:select path="//mail:SearchConvResponse/mail:m//mail:mp"
					attr="filename" match="smime.p7s" />
			</t:response>
		</t:test>


	</t:test_case>

	<t:test_case testcaseid="bug107086_SearchConv_Decrypt_test3"
		type="smoke" bugids="107086">
		<t:objective>Sender sends an encrypted message to recv 1. Recv 1
			forwards to recv 2. GetMsg on 2nd message within conversation should
			load the actual message.
		</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendSecureMsgRequest sign="true" encrypt="true"
					xmlns="urn:zimbraMail">
					<m>
						<e t="t" a='${test_account2.name}' />
						<su>${compose.subject3}</su>
						<mp ct="text/html">
							<content>${compose.content3}</content>
						</mp>
					</m>
				</SendSecureMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendSecureMsgResponse" />
			</t:response>
		</t:test>

		<t:delay sec="10"/>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account2.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${compose.subject3}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:su"
					match="${compose.subject3}" />
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg3.id" />
				<t:select path="//mail:SearchResponse/mail:m" attr="cid"
					set="conv.id4" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetConvRequest xmlns="urn:zimbraMail">
					<c id="${conv.id4}" fetch="1" max="10" />
				</GetConvRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:GetConvResponse/mail:c" attr="id"
					match="${conv.id4}" />
				<t:select path="//mail:GetConvResponse/mail:c//mail:su"
					match="${compose.subject3}" />
				<t:select path="//mail:GetConvResponse/mail:c/mail:m[1]//mail:mp"
					attr="ct" match="multipart/signed" />
				<t:select path="//mail:GetConvResponse/mail:c/mail:m[1]"
					attr="isSigned" match="true" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id4}"
					sortBy="dateDesc" offset="0" limit="250" fetch="u">
					<query>in:inbox</query>
				</SearchConvRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchConvResponse/mail:m[1]//mail:mp"
					attr="ct" match="multipart/signed" />
				<t:select path="//mail:SearchConvResponse/mail:m[1]" attr="isSigned"
					match="true" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<SendSecureMsgRequest xmlns="urn:zimbraMail"
					sign="true" encrypt="true">
					<m origid="${msg3.id}" rt="w">
						<e t="t" a="${test_account4.alias}" />
						<su>${compose.subject4}</su>
						<mp ct="text/plain">
							<content>----- Forwarded Message ----- ${compose.content4}
							</content>
						</mp>
					</m>
				</SendSecureMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendSecureMsgResponse/mail:m" attr="id"
					set="mail02.forward.id" />
			</t:response>
		</t:test>

		<t:delay sec="10"/>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${compose.subject4}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m[1]//mail:su"
					match="${compose.subject4}" />
				<t:select path="//mail:SearchResponse/mail:m[1]" attr="cid"
					set="conv.id5" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id5}"
					sortBy="dateDesc" offset="0" limit="250" fetch="u!">
					<query>in:inbox</query>
				</SearchConvRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchConvResponse/mail:m[1]//mail:su"
					match="${compose.subject4}" />
				<t:select
					path="//mail:SearchConvResponse/mail:m[1]//mail:mp//mail:content"
					contains="${compose.content4}" emptyset="1" />
				<t:select path="//mail:SearchConvResponse/mail:m[1]" attr="id"
					set="Msg_id" />
				<t:select path="//mail:SearchConvResponse/mail:m[2]//mail:su"
					match="${compose.subject3}" />
				<t:select
					path="//mail:SearchConvResponse/mail:m[2]//mail:mp//mail:content"
					contains="${compose.content3}" />
				<t:select path="//mail:SearchConvResponse/mail:m[2]" attr="isSigned"
					match="true" />
				<t:select path="//mail:SearchConvResponse/mail:m[2]" attr="isEncrypted"
					match="true" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetMsgRequest xmlns="urn:zimbraMail">
					<m id="${Msg_id}" />
				</GetMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:GetMsgResponse/mail:m" attr="isSigned"
					match="true" />
				<t:select path="//mail:GetMsgResponse//mail:m//mail:mp"
					attr="ct" match="application/pkcs7-signature" />
				<t:select path="//mail:GetMsgResponse//mail:mp" attr="filename"
					match="smime.p7s" />
				<t:select path="//mail:GetMsgResponse//mail:content"
					contains="${compose.content4}" />
			</t:response>
		</t:test>


	</t:test_case>

	<t:test_case testcaseid="bug107086_SearchConv_Decrypt_test4"
		type="smoke" bugids="107086">
		<t:objective>Sender sends an encrypted mail with an attachment. Verify
			on receiver, SearchConvResponse decrypts the message with attachment
			properly.
		</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:uploadservlettest>
			<t:uploadServletRequest>
				<filename>${image_attach}</filename>
			</t:uploadServletRequest>
			<t:uploadServletResponse>
				<t:select attr="id" set="image.aid" />
			</t:uploadServletResponse>
		</t:uploadservlettest>

		<t:test>
			<t:request>
				<SendSecureMsgRequest sign="true" encrypt="true"
					xmlns="urn:zimbraMail">
					<m>
						<e t="t" a='${test_account2.name}' />
						<su>${compose.subject5}</su>
						<mp ct="text/html">
							<content>${compose.content5}</content>
						</mp>
						<attach aid="${image.aid}" />
					</m>
				</SendSecureMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendSecureMsgResponse" />
			</t:response>
		</t:test>

		<t:delay sec="10"/>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account2.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:uploadservlettest>
			<t:uploadServletRequest>
				<filename>${image1_attach}</filename>
			</t:uploadServletRequest>
			<t:uploadServletResponse>
				<t:select attr="id" set="image1.aid" />
			</t:uploadServletResponse>
		</t:uploadservlettest>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${compose.subject5}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:su"
					match="${compose.subject5}" />
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg6.id" />
				<t:select path="//mail:SearchResponse/mail:m" attr="cid"
					set="conv.id6" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendSecureMsgRequest xmlns="urn:zimbraMail"
					sign="true" encrypt="true">
					<m origid="${msg6.id}" rt="r">
						<e t="t" a="${test_account4.alias}" />
						<su>${compose.subject6}</su>
						<mp ct="text/plain">
							<content>Reply message ${compose.content6}</content>
						</mp>
						<attach aid="${image1.aid}" />
					</m>
				</SendSecureMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendSecureMsgResponse/mail:m" attr="id"
					set="mail04.reply.id" />
			</t:response>
		</t:test>

		<t:delay sec="10"/>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${compose.subject6}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m[1]//mail:su"
					match="${compose.subject6}" />
				<t:select path="//mail:SearchResponse/mail:m[1]" attr="cid"
					set="conv.id6" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id6}"
					sortBy="dateDesc" offset="0" limit="250" fetch="u!">
					<query>in:inbox</query>
				</SearchConvRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchConvResponse/mail:m[1]//mail:su"
					match="${compose.subject6}" />
				<t:select
					path="//mail:SearchConvResponse/mail:m[1]//mail:mp//mail:content"
					contains="${compose.content6}" emptyset="1" />
				<t:select path="//mail:SearchConvResponse/mail:m[1]" attr="id"
					set="Msg_id" />
				<t:select path="//mail:SearchConvResponse/mail:m[2]//mail:su"
					match="${compose.subject5}" />
				<t:select
					path="//mail:SearchConvResponse/mail:m[2]//mail:mp//mail:content"
					contains="${compose.content5}" />
				<t:select path="//mail:SearchConvResponse/mail:m[2]" attr="isSigned"
					match="true" />
				<t:select path="//mail:SearchConvResponse/mail:m[2]" attr="isEncrypted"
					match="true" />
				<t:select path="//mail:SearchConvResponse/mail:m[2]//mail:mp"
					attr="filename" match="image1.jpg" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetMsgRequest xmlns="urn:zimbraMail">
					<m id="${Msg_id}" />
				</GetMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:GetMsgResponse/mail:m" attr="isSigned"
					match="true" />
				<t:select path="//mail:GetMsgResponse//mail:m//mail:mp"
					attr="ct" match="application/pkcs7-signature" />
				<t:select path="//mail:GetMsgResponse//mail:mp" attr="filename"
					match="smime.p7s" />
				<t:select path="//mail:GetMsgResponse//mail:content"
					contains="${compose.content6}" />
				<t:select path="//mail:GetMsgResponse//mail:mp" attr="filename"
					match="image2.jpg" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="bug107086_SearchConv_Decrypt_test5"
		type="smoke" bugids="107086">
		<t:objective>SearchConv request with decrypted mail. Remove the
			certificate. All mails within conversation should be shown encrypted.
		</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendSecureMsgRequest sign="true" encrypt="true"
					xmlns="urn:zimbraMail">
					<m>
						<e t="t" a='${test_account2.name}' />
						<su>${compose.subject7}</su>
						<mp ct="text/html">
							<content>${compose.content7}</content>
						</mp>
					</m>
				</SendSecureMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendSecureMsgResponse" />
			</t:response>
		</t:test>

		<t:delay sec="10"/>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account2.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${compose.subject7}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:su"
					match="${compose.subject7}" />
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg10.id" />
				<t:select path="//mail:SearchResponse/mail:m" attr="cid"
					set="conv.id7" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetConvRequest xmlns="urn:zimbraMail">
					<c id="${conv.id7}" fetch="1" max="10" />
				</GetConvRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:GetConvResponse/mail:c" attr="id"
					match="${conv.id7}" />
				<t:select path="//mail:GetConvResponse/mail:c//mail:su"
					match="${compose.subject7}" />
				<t:select path="//mail:GetConvResponse/mail:c/mail:m[1]//mail:mp"
					attr="ct" match="multipart/signed" />
				<t:select path="//mail:GetConvResponse/mail:c/mail:m[1]"
					attr="isSigned" match="true" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id7}"
					sortBy="dateDesc" offset="0" limit="250" fetch="u">
					<query>in:inbox</query>
				</SearchConvRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchConvResponse/mail:m[1]//mail:mp"
					attr="ct" match="multipart/signed" />
				<t:select path="//mail:SearchConvResponse/mail:m[1]" attr="isSigned"
					match="true" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendSecureMsgRequest xmlns="urn:zimbraMail"
					sign="true" encrypt="true">
					<m origid="${msg10.id}" rt="w">
						<e t="t" a="${test_account4.alias}" />
						<su>${compose.subject8}</su>
						<mp ct="text/plain">
							<content>----- Forwarded Message ----- ${compose.content8}
							</content>
						</mp>
					</m>
				</SendSecureMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendSecureMsgResponse/mail:m" attr="id"
					set="mail05.forward.id" />
			</t:response>
		</t:test>
		
		<t:delay sec="10"/>
		
		<t:test>
			<t:request>
				<ItemActionRequest xmlns="urn:zimbraMail">
					<action op="delete" id="${pvtKeyId_pn2},${pubCertId_pn2}" />
				</ItemActionRequest>
			</t:request>
			<t:response>

			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${compose.subject8}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m[1]//mail:su"
					match="${compose.subject8}" />
				<t:select path="//mail:SearchResponse/mail:m[1]" attr="cid"
					set="conv.id7" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id7}"
					sortBy="dateDesc" offset="0" limit="250" fetch="u!">
					<query>in:inbox</query>
				</SearchConvRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchConvResponse/mail:m[1]//mail:su"
					match="${compose.subject8}" />
				<t:select
					path="//mail:SearchConvResponse/mail:m[1]//mail:mp//mail:content"
					contains="${compose.content8}" emptyset="1" />
				<t:select path="//mail:SearchConvResponse/mail:m[1]" attr="id"
					set="Msg_id2" />
				<t:select path="//mail:SearchConvResponse/mail:m[2]//mail:su"
					match="${compose.subject7}" />
				<t:select
					path="//mail:SearchConvResponse/mail:m[2]//mail:mp//mail:content"
					contains="${compose.content7}" emptyset="1" />
				<t:select path="//mail:SearchConvResponse/mail:m[2]" attr="isSigned"
					match="false" />
				<t:select path="//mail:SearchConvResponse/mail:m[2]" attr="isEncrypted"
					match="true" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetMsgRequest xmlns="urn:zimbraMail">
					<m id="${Msg_id2}" />
				</GetMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:GetMsgResponse//mail:m//mail:mp"
					attr="ct" match="application/pkcs7-mime" />
				<t:select path="//mail:GetMsgResponse//mail:mp" attr="filename"
					match="smime.p7m" />
				<t:select path="//mail:GetMsgResponse/mail:m" attr="isSigned"
					match="false" />
				<t:select path="//mail:GetMsgResponse/mail:m" attr="isEncrypted"
					match="true" />
				<t:select path="//mail:GetMsgResponse/mail:m" attr="decryptionErrorCode"
					match="LOAD_CERTIFICATE_FAILED" />					
			</t:response>
		</t:test>
		
	</t:test_case>

 	<t:finally>
		<t:test id="admin_login" required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test required="false">
			<t:request>
				<DeleteAccountRequest xmlns="urn:zimbraAdmin">
					<id>${test_account1.id}</id>
				</DeleteAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:DeleteAccountResponse" />
			</t:response>
		</t:test>

		<t:test required="false">
			<t:request>
				<DeleteAccountRequest xmlns="urn:zimbraAdmin">
					<id>${test_account2.id}</id>
				</DeleteAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:DeleteAccountResponse" />
			</t:response>
		</t:test>

		<t:test required="false">
			<t:request>
				<DeleteAccountRequest xmlns="urn:zimbraAdmin">
					<id>${test_account3.id}</id>
				</DeleteAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:DeleteAccountResponse" />
			</t:response>
		</t:test>

		<t:test required="false">
			<t:request>
				<DeleteAccountRequest xmlns="urn:zimbraAdmin">
					<id>${test_account4.id}</id>
				</DeleteAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:DeleteAccountResponse" />
			</t:response>
		</t:test>

		<t:test required="false">
			<t:request>
				<DeleteAccountRequest xmlns="urn:zimbraAdmin">
					<id>${test_account5.id}</id>
				</DeleteAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:DeleteAccountResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<DeleteDomainRequest xmlns="urn:zimbraAdmin">
					<id>${domain.id}</id>
				</DeleteDomainRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:DeleteDomainResponse" />
			</t:response>
		</t:test>
		
	    <t:test>
	        <t:request>
	            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
	                <a n="zimbraSmimeOCSPEnabled">TRUE</a>
	            </ModifyConfigRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyConfigResponse"/>
	        </t:response>
	    </t:test>
    
	</t:finally>

</t:tests>
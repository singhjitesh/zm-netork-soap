<t:tests xmlns:t="urn:zimbraTestHarness">

	<t:property name="test_account1.name" value="user1_425@zcs425.com" />
	<t:property name="test_account2.name" value="user2_425@zcs425.com" />
	<t:property name="test_account2.alias" value="user2_alias_425@zcs425.com" />
	<t:property name="user2_p12" value="${testMailRaw.root}/zcs-425/user2.p12" />
	<t:property name="user2_public_alias_crt" value="${testMailRaw.root}/zcs-425/user2_public_alias.crt" />
	<t:property name="domain_name" value="zcs425.com" />
	<t:property name="compose.subject" value="encrypted from mail app" />
	<t:property name="compose.subject1" value="test encrypt attachment" />
	<t:property name="compose.content" value="Check encryption only." />
	<t:property name="compose.content1" value="Attachment decrypt" />
	<t:property name="compose.content1_filename" value="image2.jpeg" />
	<t:property name="password_testcase1" value="zimbra" />
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}" />
	<t:property name="test_acct.server" value="NOT_DEFINED" />
	<t:property name="msg01.file" value="${testMailRaw.root}/zcs-425/mime01.txt" />
	<t:property name="msg02.file" value="${testMailRaw.root}/zcs-425/mime02.txt" />

	<t:test_case testcaseid="Ping" type="always">
		<t:objective>basic system check</t:objective>

		<t:test required="true">
			<t:request>
				<PingRequest xmlns="urn:zimbraAdmin" />
			</t:request>
			<t:response>
				<t:select path="//admin:PingResponse" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="acctSetup1" type="always">
		<t:objective>create test account</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

	    <t:test>
	        <t:request>
	            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
	                <a n="zimbraSmimeOCSPEnabled">FALSE</a>
	            </ModifyConfigRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyConfigResponse"/>
	        </t:response>
	    </t:test>
    
		<t:test required="true">
			<t:request>
				<CreateDomainRequest xmlns="urn:zimbraAdmin">
					<name>${domain_name}</name>
				</CreateDomainRequest>
			</t:request>
			<t:response>
                <t:select path="//admin:CreateDomainResponse//admin:domain" attr="id" set="domain.id" />
            </t:response>				
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account1.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraFeatureSMIMEEnabled">TRUE</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account1.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct1.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account2.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraFeatureSMIMEEnabled">TRUE</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account2.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct2.server" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AddAccountAliasRequest xmlns="urn:zimbraAdmin">
					<id>${test_account2.id}</id>
					<alias>${test_account2.alias}</alias>
				</AddAccountAliasRequest>
			</t:request>
			<t:response>

			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:uploadservlettest>
			<t:uploadServletRequest>
				<filename>${user2_public_alias_crt}</filename>
			</t:uploadServletRequest>
			<t:uploadServletResponse>
				<t:select attr="StatusCode" match="200" />
				<t:select attr="id" set="user2_pub.id" />
			</t:uploadServletResponse>
		</t:uploadservlettest>
		
		<t:test>
			<t:request>
				<CreateContactRequest xmlns="urn:zimbraMail">
					<cn>
						<a n="firstName">first2</a>
						<a n="lastName">last2</a>
						<a n="email">${test_account2.alias}</a>
						<a n="userCertificate" aid="${user2_pub.id}" />
					</cn>
				</CreateContactRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateContactResponse/mail:cn">
					<t:select attr="id" set="contact2.id" />
				</t:select>
			</t:response>
		</t:test>

	</t:test_case>

	<t:property name="server.zimbraAccount" value="${test_acct2.server}" />

	<t:test_case testcaseid="zcs425_Test1" type="smoke" bugids="425">
		<t:objective> Verify when just encrypted mail is received, ZWC user is
			not able to decrypt
			it if it's certificate is not present.
		</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:mailinjecttest>
			<t:lmtpInjectRequest>
				<filename>${msg01.file}</filename>
				<to>${test_account2.alias}</to>
				<from>${test_account1.name}</from>
				<server>${test_acct1.server}</server>
			</t:lmtpInjectRequest>
		</t:mailinjecttest>


		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account2.alias}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${compose.subject}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m[1]//mail:su"
					match="${compose.subject}" />
				<t:select path="//mail:SearchResponse/mail:m[1]" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetMsgRequest xmlns="urn:zimbraMail">
					<m id="${msg1.id}" />
				</GetMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:GetMsgResponse/mail:m" attr="isSigned"
					match="false" />
				<t:select path="//mail:GetMsgResponse/mail:m" attr="isEncrypted"
					match="true" />
				<t:select path="//mail:GetMsgResponse//mail:m//mail:mp"
					attr="ct" match="application/pkcs7-mime" />
				<t:select path="//mail:GetMsgResponse//mail:mp" attr="filename"
					match="smime.p7m" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="zcs425_Test2" type="smoke" bugids="425">
		<t:objective> Verify when just encrypted mail is received, ZWC user is
			able to decrypt
			it using it's private key.
		</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:mailinjecttest>
			<t:lmtpInjectRequest>
				<filename>${msg01.file}</filename>
				<to>${test_account2.alias}</to>
				<from>${test_account1.name}</from>
				<server>${test_acct1.server}</server>
			</t:lmtpInjectRequest>
		</t:mailinjecttest>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account2.alias}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:uploadservlettest>
			<t:uploadServletRequest>
				<filename>${user2_p12}</filename>
			</t:uploadServletRequest>
			<t:uploadServletResponse>
				<t:select attr="StatusCode" match="200" />
				<t:select attr="id" set="uploadFileId1" />
			</t:uploadServletResponse>
		</t:uploadservlettest>

		<t:test>
			<t:request>
				<SaveSmimeCertificateRequest xmlns="urn:zimbraAccount">
					<upload id="${uploadFileId1}"></upload>
					<password>${password_testcase1}</password>
				</SaveSmimeCertificateRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate"
					attr="pubCertId" set="pubCertId_pn2" />
				<t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate"
					attr="pvtKeyId" set="pvtKeyId_pn2" />
				<t:select
					path="//acct:SaveSmimeCertificateResponse/acct:certificate/acct:emailAddress"
					match="${test_account2.alias}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${compose.subject}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m[1]//mail:su"
					match="${compose.subject}" />
				<t:select path="//mail:SearchResponse/mail:m[1]" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetMsgRequest xmlns="urn:zimbraMail">
					<m id="${msg1.id}" />
				</GetMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:GetMsgResponse/mail:m" attr="isSigned"
					match="false" />
				<t:select path="//mail:GetMsgResponse/mail:m" attr="isEncrypted"
					match="true" />
				<t:select path="//mail:GetMsgResponse//mail:content"
					contains="${compose.content}" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="zcs425_Test3" type="smoke" bugids="425">
		<t:objective> Verify when just encrypted mail with attachment is
			received, ZWC user is able to decrypt
			it using it's private key .
		</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:mailinjecttest>
			<t:lmtpInjectRequest>
				<filename>${msg02.file}</filename>
				<to>${test_account2.alias}</to>
				<from>${test_account1.name}</from>
				<server>${test_acct1.server}</server>
			</t:lmtpInjectRequest>
		</t:mailinjecttest>


		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account2.alias}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${compose.subject1}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m[1]//mail:su"
					match="${compose.subject1}" />
				<t:select path="//mail:SearchResponse/mail:m[1]" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetMsgRequest xmlns="urn:zimbraMail">
					<m id="${msg1.id}" />
				</GetMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:GetMsgResponse/mail:m" attr="isSigned"
					match="false" />
				<t:select path="//mail:GetMsgResponse/mail:m" attr="isEncrypted"
					match="true" />
				<t:select path="//mail:GetMsgResponse//mail:content"
					contains="${compose.content1}" />
				<t:select path="//mail:GetMsgResponse//mail:mp" attr="filename"
					match="${compose.content1_filename}" />
			</t:response>
		</t:test>

	</t:test_case>

 	<t:finally>
		<t:test id="admin_login" required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test required="false">
			<t:request>
				<DeleteAccountRequest xmlns="urn:zimbraAdmin">
					<id>${test_account1.id}</id>
				</DeleteAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:DeleteAccountResponse" />
			</t:response>
		</t:test>

		<t:test required="false">
			<t:request>
				<DeleteAccountRequest xmlns="urn:zimbraAdmin">
					<id>${test_account2.id}</id>
				</DeleteAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:DeleteAccountResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<DeleteDomainRequest xmlns="urn:zimbraAdmin">
					<id>${domain.id}</id>
				</DeleteDomainRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:DeleteDomainResponse" />
			</t:response>
		</t:test>

	    <t:test>
	        <t:request>
	            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
	                <a n="zimbraSmimeOCSPEnabled">TRUE</a>
	            </ModifyConfigRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyConfigResponse"/>
	        </t:response>
	    </t:test>
    
	</t:finally> 

</t:tests>
<t:tests xmlns:t="urn:zimbraTestHarness">

    <t:property name="test_account1.name" value="test_zcs165_1@${defaultdomain.name}" />
    <t:property name="test_account2.name" value="test_zcs165_2@${defaultdomain.name}" />
    <t:property name="pkcs_mime" value="${testMailRaw.root}/ZCS-165/mime1.txt" />
    <t:property name="compose.subject" value="ZCS-165" />
    <t:property name="compose.content" value="test" />

    <t:test_case testcaseid="zcs165_CreateAndSetupAccounts" type="always" bugids="zcs-165">
        <t:objective>
            1. Create test accounts
        </t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>
        
        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account1.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraFeatureSMIMEEnabled">TRUE</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account1.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account2.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraFeatureSMIMEEnabled">TRUE</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account2.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server" />
            </t:response>
        </t:test>

    </t:test_case>

    <t:test_case testcaseid="zcs165_VerifyContents" type="smoke" bugids="zcs-165">
        <t:objective>
            1. Inject PKCS-7 signed mime in the users inbox
            2. Search the message and verify contents can be viewed in clear text.
        </t:objective>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${pkcs_mime}</filename>
                <to>${test_account2.name}</to>
                <from>${test_account1.name}</from>
                <server>${test_acct1.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>
        
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account2.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>subject:${compose.subject}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m/mail:su" match="${compose.subject}"/>
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id"/>
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetMsgRequest xmlns="urn:zimbraMail">
                    <m id="${msg1.id}" />
                </GetMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:GetMsgResponse/mail:m" attr="isSigned" match="true" />
                <t:select path="//mail:GetMsgResponse/mail:m" attr="isEncrypted" match="false" />
                <t:select path="//mail:GetMsgResponse/mail:m/mail:mp/mail:mp/mail:content" contains="${compose.content}" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:finally>
        <t:test id="admin_login" required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test required="false">
            <t:request>
                <DeleteAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${test_account1.id}</id>
                </DeleteAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:DeleteAccountResponse" />
            </t:response>
        </t:test>
        <t:test required="false">
            <t:request>
                <DeleteAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${test_account2.id}</id>
                </DeleteAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:DeleteAccountResponse" />
            </t:response>
        </t:test>

    </t:finally> 
</t:tests>
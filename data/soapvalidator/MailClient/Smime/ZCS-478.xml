<t:tests xmlns:t="urn:zimbraTestHarness">

    <t:property name="test_account1.name" value="test_zcs160_1@new.domain.local" />
    <t:property name="test_account2.name" value="test_zcs160_2@new.domain.local" />
    <t:property name="uploadCert.name1" value="${testMailRaw.root}/zcs-478/test_zcs160_1.p12" />
    <t:property name="uploadCert.name2" value="${testMailRaw.root}/zcs-478/test_zcs160_2.p12" />
    <t:property name="uploadPubCert.name2" value="${testMailRaw.root}/zcs-478/test_zcs160_2.crt" />
    <t:property name="domain_name" value="new.domain.local" />
    <t:property name="compose.subject1" value="Subject test1" />
    <t:property name="compose.subject2" value="Subject test2" />
    <t:property name="compose.subject3" value="Subject test3" />
    <t:property name="compose.subject4" value="Subject test4" />
    <t:property name="compose.subject5" value="Subject test5" />
    <t:property name="compose.content" value="Content in the message is contents..." />
    <t:property name="password_for_certs" value="test123" />

    <t:test_case testcaseid="zcs478_CreateAndSetupAccounts" type="always" bugids="zcs-478">
        <t:objective>
            1. Create domain
            2. Create account 1
            3. Create account 2
            4. Add certificate for account 1
            5. Create contact in account 1 for account 2 with public cert.
        </t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

	    <t:test>
	        <t:request>
	            <ModifyConfigRequest xmlns="urn:zimbraAdmin">
	                <a n="zimbraSmimeOCSPEnabled">FALSE</a>
	            </ModifyConfigRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyConfigResponse"/>
	        </t:response>
	    </t:test>
            
        <!-- create domain -->
        <t:test required="true">
            <t:request>
                <CreateDomainRequest xmlns="urn:zimbraAdmin">
                    <name>${domain_name}</name>
                </CreateDomainRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateDomainResponse//admin:domain" attr="id" set="domain1.id" />
            </t:response>
        </t:test>
        
        <!-- create account 1 -->
        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account1.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraFeatureSMIMEEnabled">TRUE</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account1.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server" />
            </t:response>
        </t:test>
        
        <!-- create account 2 -->
        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account2.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraFeatureSMIMEEnabled">TRUE</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account2.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server" />
            </t:response>
        </t:test>
        
        <!-- setup certificate for account 1 -->
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>
        
        <t:uploadservlettest>
            <t:uploadServletRequest>
                <filename>${uploadCert.name1}</filename>
            </t:uploadServletRequest>
            <t:uploadServletResponse>
                <t:select attr="StatusCode" match="200" />
                <t:select attr="id" set="uploadFileId_1" />
            </t:uploadServletResponse>
        </t:uploadservlettest>
        
        <t:test>
            <t:request>
                <SaveSmimeCertificateRequest xmlns="urn:zimbraAccount">
                    <upload id="${uploadFileId_1}"></upload>
                    <password>${password_for_certs}</password>
                </SaveSmimeCertificateRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate" attr="pubCertId" set="pubCertId" />
                <t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate" attr="pvtKeyId" set="pvtKeyId" />
                <t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate/acct:emailAddress" match="${test_account1.name}" />
            </t:response>
        </t:test>
        
        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account2.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>            
        </t:test>
        
        <t:uploadservlettest>
            <t:uploadServletRequest>
                <filename>${uploadCert.name2}</filename>
            </t:uploadServletRequest>
            <t:uploadServletResponse>
                <t:select attr="StatusCode" match="200" />
                <t:select attr="id" set="uploadFileId_2" />
            </t:uploadServletResponse>
        </t:uploadservlettest>
        
        <t:test>
            <t:request>
                <SaveSmimeCertificateRequest xmlns="urn:zimbraAccount">
                    <upload id="${uploadFileId_2}"></upload>
                    <password>${password_for_certs}</password>
                </SaveSmimeCertificateRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate" attr="pubCertId" set="pubCertId2" />
                <t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate" attr="pvtKeyId" set="pvtKeyId2" />
                <t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate/acct:emailAddress" match="${test_account2.name}" />
            </t:response>
        </t:test>
                
        <!-- create contanct with userCertificate in account 1 -->
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>
        
        <t:uploadservlettest>
            <t:uploadServletRequest>
                <filename>${uploadPubCert.name2}</filename>
            </t:uploadServletRequest>
            <t:uploadServletResponse>
                <t:select attr="StatusCode" match="200" />
                <t:select attr="id" set="aid.pub.cert" />
            </t:uploadServletResponse>
        </t:uploadservlettest>
        
        <t:test id="create_contact_request">
            <t:request>
                <CreateContactRequest xmlns="urn:zimbraMail">
                    <cn>
                        <a n="firstName">test_2</a>
                        <a n="lastName">zcs160_2</a>
                        <a n="email">${test_account2.name}</a>
                        <a n="userCertificate" aid="${aid.pub.cert}" />
                    </cn>
                </CreateContactRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:CreateContactResponse/mail:cn/mail:a[@n='userCertificate']" />
                <t:select path="//mail:CreateContactResponse/mail:cn" attr="id" set="contact1.id" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="zcs478_EncTrueSignFalse" type="smoke" bugids="zcs-478">
        <t:objective>
            1. Send only encrypted message to account 2 from account 1
            2. GetConversation on account 2 and verify encryption is true and signed is false.
            3. SearchConversation on account 2 and verify encryption is true and signed is false.
            4. GetMessage on account 2 and verify encryption is true and signed is false.
        </t:objective>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>
        <t:test>
            <t:request>
                <SendSecureMsgRequest sign="false" encrypt="true" xmlns="urn:zimbraMail">
                    <m>
                        <e t="t" a='${test_account2.name}' />
                        <su>${compose.subject1}</su>
                        <mp ct="text/plain">
                            <content> ${compose.content} </content>
                        </mp>
                    </m>
                </SendSecureMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SendSecureMsgResponse" />
            </t:response>
        </t:test>
        
        <t:delay sec="10"/>
        	
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account2.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>subject:${compose.subject1}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m[1]//mail:su" match="${compose.subject1}"/>
                <t:select path="//mail:SearchResponse/mail:m[1]" attr="cid" set="conv.id2"/>
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetConvRequest xmlns="urn:zimbraMail">
                    <c id="${conv.id2}" fetch="1" max="10" />
                </GetConvRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:GetConvResponse/mail:c" attr="id" match="${conv.id2}"/>
                <t:select path="//mail:GetConvResponse/mail:c//mail:su" match="${compose.subject1}"/>
                <t:select path="//mail:GetConvResponse/mail:c/mail:m[1]" attr="isSigned" match="false"/>
                <t:select path="//mail:GetConvResponse/mail:c/mail:m[1]" attr="isEncrypted" match="true"/>
            </t:response>
        </t:test>
        
        <t:test>
            <t:request>
                <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id2}" sortBy="dateDesc" offset="0" limit="25" fetch="u">
                    <query>in:inbox</query>
                </SearchConvRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="isSigned" match="false"/>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="isEncrypted" match="true"/>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="decryptionErrorCode" emptyset="1"/>
                </t:response>
        </t:test>
        
                <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>subject:${compose.subject1}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m/mail:su" match="${compose.subject1}" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetMsgRequest xmlns="urn:zimbraMail">
                    <m id="${msg1.id}" />
                </GetMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:GetMsgResponse/mail:m" attr="isSigned" match="false" />
                <t:select path="//mail:GetMsgResponse/mail:m" attr="isEncrypted" match="true" />
                <t:select path="//mail:GetMsgResponse/mail:m" attr="decryptionErrorCode" emptyset="1" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="zcs478_EncfalseSignFalse" type="smoke" bugids="zcs-478">
        <t:objective>
            1. Send normal message to account 2 from account 1. sign=false and encrypt=false
            2. GetConversation on account 2 and verify encryption is false and signed is false.
            3. SearchConversation on account 2 and verify encryption is false and signed is false.
            4. GetMessage on account 2 and verify encryption is false and signed is false.
        </t:objective>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>
        <t:test>
            <t:request>
                <SendSecureMsgRequest sign="false" encrypt="false" xmlns="urn:zimbraMail">
                    <m>
                        <e t="t" a='${test_account2.name}' />
                        <su>${compose.subject2}</su>
                        <mp ct="text/plain">
                            <content> ${compose.content} </content>
                        </mp>
                    </m>
                </SendSecureMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SendSecureMsgResponse" />
            </t:response>
        </t:test>
        
        <t:delay sec="10"/>
        
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account2.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>subject:${compose.subject2}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m[1]//mail:su" match="${compose.subject2}"/>
                <t:select path="//mail:SearchResponse/mail:m[1]" attr="cid" set="conv.id2"/>
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetConvRequest xmlns="urn:zimbraMail">
                    <c id="${conv.id2}" fetch="1" max="10" />
                </GetConvRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:GetConvResponse/mail:c" attr="id" match="${conv.id2}"/>
                <t:select path="//mail:GetConvResponse/mail:c//mail:su" match="${compose.subject2}"/>
                <t:select path="//mail:GetConvResponse/mail:c/mail:m[1]" attr="isSigned" match="false"/>
                <t:select path="//mail:GetConvResponse/mail:c/mail:m[1]" attr="isEncrypted" match="false"/>
            </t:response>
        </t:test>
        
        <t:test>
            <t:request>
                <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id2}" sortBy="dateDesc" offset="0" limit="25" fetch="u">
                    <query>in:inbox</query>
                </SearchConvRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="isSigned" match="false"/>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="isEncrypted" match="false"/>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="decryptionErrorCode" emptyset="1"/>
                </t:response>
        </t:test>
        
                <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>subject:${compose.subject2}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m/mail:su" match="${compose.subject2}" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetMsgRequest xmlns="urn:zimbraMail">
                    <m id="${msg1.id}" />
                </GetMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:GetMsgResponse/mail:m" attr="isSigned" match="false" />
                <t:select path="//mail:GetMsgResponse/mail:m" attr="isEncrypted" match="false" />
                <t:select path="//mail:GetMsgResponse/mail:m" attr="decryptionErrorCode" emptyset="1" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="zcs478_EnctrueSignTrue" type="smoke" bugids="zcs-478">
        <t:objective>
            1. Send encrypted and signed message to account 2 from account 1. sign=true and encrypt=true
            2. GetConversation, SearchConversation and GetMessage on account 2 and verify encryption is true and signed is true.
        </t:objective>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>
        <t:test>
            <t:request>
                <SendSecureMsgRequest sign="true" encrypt="true" xmlns="urn:zimbraMail">
                    <m>
                        <e t="t" a='${test_account2.name}' />
                        <su>${compose.subject3}</su>
                        <mp ct="text/plain">
                            <content> ${compose.content} </content>
                        </mp>
                    </m>
                </SendSecureMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SendSecureMsgResponse" />
            </t:response>
        </t:test>
        
        <t:delay sec="10"/>
        
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account2.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>subject:${compose.subject3}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m[1]//mail:su" match="${compose.subject3}"/>
                <t:select path="//mail:SearchResponse/mail:m[1]" attr="cid" set="conv.id2"/>
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetConvRequest xmlns="urn:zimbraMail">
                    <c id="${conv.id2}" fetch="1" max="10" />
                </GetConvRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:GetConvResponse/mail:c" attr="id" match="${conv.id2}"/>
                <t:select path="//mail:GetConvResponse/mail:c//mail:su" match="${compose.subject3}"/>
                <t:select path="//mail:GetConvResponse/mail:c/mail:m[1]" attr="isSigned" match="true"/>
                <t:select path="//mail:GetConvResponse/mail:c/mail:m[1]" attr="isEncrypted" match="true"/>
            </t:response>
        </t:test>
        
        <t:test>
            <t:request>
                <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id2}" sortBy="dateDesc" offset="0" limit="25" fetch="u">
                    <query>in:inbox</query>
                </SearchConvRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="isSigned" match="true"/>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="isEncrypted" match="true"/>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="decryptionErrorCode" emptyset="1"/>
                </t:response>
        </t:test>
        
                <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>subject:${compose.subject3}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m/mail:su" match="${compose.subject3}" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetMsgRequest xmlns="urn:zimbraMail">
                    <m id="${msg1.id}" />
                </GetMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:GetMsgResponse/mail:m" attr="isSigned" match="true" />
                <t:select path="//mail:GetMsgResponse/mail:m" attr="isEncrypted" match="true" />
                <t:select path="//mail:GetMsgResponse/mail:m" attr="decryptionErrorCode" emptyset="1" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="zcs478_EncInvalidSignfalse" type="smoke" bugids="zcs-478">
        <t:objective>
            1. Send encrypted and signed message to account 2 from account 1. sign=false and encrypt=invalid
            2. GetConversation, SearchConversation and GetMessage on account 2 and verify encryption is false and signed is false.
        </t:objective>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>
        <t:test>
            <t:request>
                <SendSecureMsgRequest sign="false" encrypt="invalidval" xmlns="urn:zimbraMail">
                    <m>
                        <e t="t" a='${test_account2.name}' />
                        <su>${compose.subject4}</su>
                        <mp ct="text/plain">
                            <content> ${compose.content} </content>
                        </mp>
                    </m>
                </SendSecureMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SendSecureMsgResponse" />
            </t:response>
        </t:test>
        
        <t:delay sec="10"/>
        
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account2.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>subject:${compose.subject4}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m[1]//mail:su" match="${compose.subject4}"/>
                <t:select path="//mail:SearchResponse/mail:m[1]" attr="cid" set="conv.id2"/>
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetConvRequest xmlns="urn:zimbraMail">
                    <c id="${conv.id2}" fetch="1" max="10" />
                </GetConvRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:GetConvResponse/mail:c" attr="id" match="${conv.id2}"/>
                <t:select path="//mail:GetConvResponse/mail:c//mail:su" match="${compose.subject4}"/>
                <t:select path="//mail:GetConvResponse/mail:c/mail:m[1]" attr="isSigned" match="false"/>
                <t:select path="//mail:GetConvResponse/mail:c/mail:m[1]" attr="isEncrypted" match="false"/>
            </t:response>
        </t:test>
        
        <t:test>
            <t:request>
                <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id2}" sortBy="dateDesc" offset="0" limit="25" fetch="u">
                    <query>in:inbox</query>
                </SearchConvRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="isSigned" match="false"/>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="isEncrypted" match="false"/>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="decryptionErrorCode" emptyset="1"/>
                </t:response>
        </t:test>
        
                <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>subject:${compose.subject4}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m/mail:su" match="${compose.subject4}" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetMsgRequest xmlns="urn:zimbraMail">
                    <m id="${msg1.id}" />
                </GetMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:GetMsgResponse/mail:m" attr="isSigned" match="false" />
                <t:select path="//mail:GetMsgResponse/mail:m" attr="isEncrypted" match="false" />
                <t:select path="//mail:GetMsgResponse/mail:m" attr="decryptionErrorCode" emptyset="1" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="zcs478_SentFolderdecryptError" type="smoke" bugids="zcs-478">
        <t:objective>
            1. Delete account1 certificate and Send encrypted message to account 2 from account 1. sign=false and encrypt=true.
            2. GetConversation, SearchConversation and GetMessage on account 2 and verify encryption is true and signed is false.
            3. Verfy in account1 sent folder, message should not be decrypted and error should be seen.
        </t:objective>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <ItemActionRequest xmlns="urn:zimbraMail">
                    <action id="${pvtKeyId}" op="delete"/>
                </ItemActionRequest>
            </t:request>
             <t:response>
                  <t:select path="//mail:ItemActionResponse/mail:action" attr="op" match="delete"/>
                  <t:select path="//mail:ItemActionResponse/mail:action" attr="id" match="${pvtKeyId}"/>
             </t:response>
        </t:test>
                
        <t:test>
            <t:request>
                <SendSecureMsgRequest sign="false" encrypt="true" xmlns="urn:zimbraMail">
                    <m>
                        <e t="t" a='${test_account2.name}' />
                        <su>${compose.subject5}</su>
                        <mp ct="text/plain">
                            <content> ${compose.content} </content>
                        </mp>
                    </m>
                </SendSecureMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SendSecureMsgResponse" />
            </t:response>
        </t:test>

		<t:delay sec="10"/>
		
 		<t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:sent subject:${compose.subject5}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m/mail:su" match="${compose.subject5}" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetMsgRequest xmlns="urn:zimbraMail">
                    <m id="${msg1.id}" />
                </GetMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:GetMsgResponse/mail:m" attr="isSigned" match="false" />
                <t:select path="//mail:GetMsgResponse/mail:m" attr="isEncrypted" match="true" />
                <t:select path="//mail:GetMsgResponse/mail:m" attr="decryptionErrorCode" match="LOAD_PRIVATE_KEY_FAILED" />
            </t:response>
        </t:test>
                
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account2.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>subject:${compose.subject5}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m[1]//mail:su" match="${compose.subject5}"/>
                <t:select path="//mail:SearchResponse/mail:m[1]" attr="cid" set="conv.id2"/>
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetConvRequest xmlns="urn:zimbraMail">
                    <c id="${conv.id2}" fetch="1" max="10" />
                </GetConvRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:GetConvResponse/mail:c" attr="id" match="${conv.id2}"/>
                <t:select path="//mail:GetConvResponse/mail:c//mail:su" match="${compose.subject5}"/>
                <t:select path="//mail:GetConvResponse/mail:c/mail:m[1]" attr="isSigned" match="false"/>
                <t:select path="//mail:GetConvResponse/mail:c/mail:m[1]" attr="isEncrypted" match="true"/>
            </t:response>
        </t:test>
        
        <t:test>
            <t:request>
                <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id2}" sortBy="dateDesc" offset="0" limit="25" fetch="u">
                    <query>in:inbox</query>
                </SearchConvRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="isSigned" match="false"/>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="isEncrypted" match="true"/>
                <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="decryptionErrorCode" emptyset="1"/>
                </t:response>
        </t:test>
        
        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>subject:${compose.subject5}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m/mail:su" match="${compose.subject5}" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetMsgRequest xmlns="urn:zimbraMail">
                    <m id="${msg1.id}" />
                </GetMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:GetMsgResponse/mail:m" attr="isSigned" match="false" />
                <t:select path="//mail:GetMsgResponse/mail:m" attr="isEncrypted" match="true" />
                <t:select path="//mail:GetMsgResponse/mail:m" attr="decryptionErrorCode" emptyset="1" />
            </t:response>
        </t:test>
    </t:test_case>
                
    <!-- clean up -->
    <t:finally>
        <t:test id="admin_login" required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>
        
        <!-- delete accounts -->
        <t:test required="false">
            <t:request>
                <DeleteAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${test_account1.id}</id>
                </DeleteAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:DeleteAccountResponse" />
            </t:response>
        </t:test>
        
        <t:test required="false">
            <t:request>
                <DeleteAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${test_account2.id}</id>
                </DeleteAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:DeleteAccountResponse" />
            </t:response>
        </t:test>
        
        <!-- delete domain -->
        <t:test>
            <t:request>
                <DeleteDomainRequest xmlns="urn:zimbraAdmin">
                    <id>${domain1.id}</id>
                </DeleteDomainRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:DeleteDomainResponse" />
            </t:response>
        </t:test>

	    <t:test>
	        <t:request>
	            <ModifyConfigRequest xmlns="urn:zimbraAdmin">
	                <a n="zimbraSmimeOCSPEnabled">TRUE</a>
	            </ModifyConfigRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyConfigResponse"/>
	        </t:response>
	    </t:test>        
    </t:finally>
</t:tests>
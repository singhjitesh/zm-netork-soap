<?xml version="1.0" encoding="UTF-8"?><t:tests xmlns:t="urn:zimbraTestHarness">

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}" />
	<t:property name="test_account1.username" value="test1${TIME}.${COUNTER}" />
	<t:property name="test_account1.name"
		value="${test_account1.username}@${defaultdomain.name}" />
	<t:property name="test_account1.password" value="test123" />	
	<t:property name="test_account2.username"
		value="test2${TIME}.${COUNTER}" />
	<t:property name="test_account2.name"
		value="${test_account2.username}@${defaultdomain.name}" />
	<t:property name="test_account2.password" value="test123" />
	<t:property name="atch1.file" value="${testMailRaw.root}/zcs2622/file1.pdf" />
	<t:property name="atch2.file" value="${testMailRaw.root}/zcs2622/image2.png" />
	<t:property name="atch1.name" value="file1.pdf" />
	<t:property name="atch2.name" value="image2.png" />
	<t:property name="message.subject1" value="Message test Subject1" />
	<t:property name="message.content1" value="Message test Content1" />

	<t:test_case testcaseid="acct_setup" type="always">
		<t:objective>Create a test account</t:objective>
		<steps>
			1. Login to admin account
			2. Create a test_account1
			3. Create a test_account2
		</steps>

		<t:test id="admin_login" required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test id="create_test_account1" required="false" depends="admin_login">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account1.name}</name>
					<password>${test_account1.password}</password>
					<a n="zimbraFeatureEwsEnabled">TRUE</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account1.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct.server" />
			</t:response>
		</t:test>
		
		<t:test id="create_test_account2" required="false" depends="admin_login">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account2.name}</name>
					<password>${test_account2.password}</password>
					<a n="zimbraFeatureEwsEnabled">TRUE</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account2.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct.server" />
			</t:response>
		</t:test>
	</t:test_case>

	<t:test_case testcaseid="RemoveAttachment_FromZWC" type="smoke">
		<t:objective>Remove single attachment from mail using Server and sync on EWS client
		</t:objective>
		<t:steps>1. Send mail with attachments from EWS and sync on Server
			2. Remove single attachment from Server and sync on EWS
		</t:steps>
		
		<!-- Send an email with attachments from user1 to user2 using EWS -->
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
				
		<t:test>
			<t:request ews="true" username="${test_account1.name}" password="${test_account1.password}">
				<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
					xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
					xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages">
					<soap:Body>
						<CreateItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages" MessageDisposition="SendAndSaveCopy">
				      <SavedItemFolderId>
				        <t:FolderId Id="5"/>
				      </SavedItemFolderId>
				      <Items>
				        <t:Message>
				          <t:MimeContent CharacterSet="UTF-8"></t:MimeContent>				          
				          <t:Importance>Normal</t:Importance>
				          <t:ExtendedProperty>
				            <t:ExtendedFieldURI PropertyTag="0x0E07" PropertyType="Integer"/>
				            <t:Value>12</t:Value>
				          </t:ExtendedProperty>
				          <t:ExtendedProperty>
				            <t:ExtendedFieldURI PropertyTag="0xE9F" PropertyType="StringArray"/>
				            <t:Values>
				              <t:Value>:R:0</t:Value>
				            </t:Values>
          				</t:ExtendedProperty>
				          <t:ToRecipients>
				            <t:Mailbox>
				              <t:Name>${test_account2.username}</t:Name>
				              <t:EmailAddress>${test_account2.name}</t:EmailAddress>
				            </t:Mailbox>
				          </t:ToRecipients>
				          <t:From>
				            <t:Mailbox>
				              <t:Name>${test_account1.username}</t:Name>
				              <t:EmailAddress>${test_account1.name}</t:EmailAddress>
				            </t:Mailbox>
				          </t:From>
				          <t:IsRead>false</t:IsRead>
				        </t:Message>
				      </Items>
				    </CreateItem>
				</soap:Body>
				</soap:Envelope>
				</t:request>
				<t:response>
					<t:select path="//ewsmsg:CreateItemResponseMessage" attr="ResponseClass"
					match="Success" />
				<t:select path="//ewsmsg:CreateItemResponseMessage//ewstype:ItemId"
					attr="Id" set="mail01.id" />
				</t:response>	
			</t:test>
			
			<t:test>
			<t:request ews="true" username="${test_account1.name}" password="${test_account1.password}">
				<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
					xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
					xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages">
					<soap:Body>
						<SyncFolderItems
							xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">
							<ItemShape>
								<t:BaseShape>IdOnly</t:BaseShape>
							</ItemShape>
							<SyncFolderId>
								<t:FolderId Id="5" />
							</SyncFolderId>
							<SyncState />
							<Ignore />
							<MaxChangesReturned>512</MaxChangesReturned>
						</SyncFolderItems>
					</soap:Body>
				</soap:Envelope>
			</t:request>
			<t:response>
				<t:select path="//ewsmsg:SyncFolderItemsResponseMessage"
					attr="ResponseClass" match="Success" />
				<t:select
					path="//ewsmsg:SyncFolderItemsResponse//ewstype:Create[1]//ewstype:ItemId"
					attr="Id" set="mail01_id" />
				<t:select
					path="//ewsmsg:SyncFolderItemsResponse//ewstype:Create[1]//ewstype:ItemId"
					attr="ChangeKey" set="mail01_changeKey" />
				<t:select
					path="//ewsmsg:SyncFolderItemsResponse//ewsmsg:SyncState"
				    set="SyncState01" />
			</t:response>		
		</t:test>	
		
		<t:test>
			<t:request ews="true" username="${test_account1.name}" password="${test_account1.password}">
				<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
					xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
					xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages">
					<soap:Body>
						<GetItem
							xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">
							<ItemShape>
								<t:BaseShape>IdOnly</t:BaseShape>
								<t:BodyType>Best</t:BodyType>
								<t:AdditionalProperties>
							          <t:FieldURI FieldURI="item:Sensitivity"/>
							          <t:ExtendedFieldURI PropertyTag="0x10F4" PropertyType="Boolean"/>
							          <t:FieldURI FieldURI="item:Categories"/>
							          <t:FieldURI FieldURI="item:Body"/>
							          <t:ExtendedFieldURI PropertyTag="0x7D" PropertyType="String"/>
							          <t:FieldURI FieldURI="item:Attachments"/>
							          <t:FieldURI FieldURI="item:Subject"/>
							          <t:FieldURI FieldURI="item:Size"/>
							          <t:FieldURI FieldURI="message:From"/>
							          <t:FieldURI FieldURI="message:Sender"/>
							          <t:FieldURI FieldURI="message:References"/>
							          <t:FieldURI FieldURI="item:HasAttachments"/>							         
								</t:AdditionalProperties>
							</ItemShape>
							<ItemIds>
								<t:ItemId Id="${mail01_id}" ChangeKey="${mail01_changeKey}" />
							</ItemIds>
						</GetItem>
					</soap:Body>
				</soap:Envelope>
			</t:request>
			<t:response>
				<t:select path="//ewsmsg:GetItemResponseMessage" attr="ResponseClass"
					match="Success" />
				<t:select path="//ewsmsg:GetItemResponseMessage//ewstype:Subject"
					match="${message.subject1}" />
				<t:select path="//ewsmsg:GetItemResponseMessage//ewstype:Body" attr="BodyType" match="HTML" />
				<t:select path="//ewsmsg:GetItemResponseMessage//ewstype:Attachments//ewstype:ContentType" match="image/png" />
				<t:select path="//ewsmsg:GetItemResponseMessage//ewstype:HasAttachments" match="true" />
				<t:select path="//ewsmsg:GetItemResponseMessage//ewstype:Attachments/ewstype:FileAttachment[1]/ewstype:Name" match="file1.pdf" />
				<t:select path="//ewsmsg:GetItemResponseMessage//ewstype:Attachments/ewstype:FileAttachment[2]/ewstype:Name" match="image2.png" />
			</t:response>
		</t:test>			
		
		<t:delay sec="5"/>
		
		<!-- Sync on Server for received email -->
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account2.name}</account>
					<password>${test_account2.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		    
	    <t:test>
	        <t:request>
	            <SearchRequest xmlns="urn:zimbraMail" types="conversation" sortBy="dateDesc" offset="0" limit="25">
	                <query>subject:${message.subject1}</query>
	            </SearchRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//mail:SearchResponse//mail:su" match="${message.subject1}" />	
	            <t:select path="//mail:SearchResponse//mail:m" attr="id" set="mail01_id_wc" />	            
	        </t:response>
	     </t:test>
	     
	      <t:test>
			<t:request>
				<GetMsgRequest xmlns="urn:zimbraMail">
					<m id="${mail01_id_wc}" />
				</GetMsgRequest>
			</t:request>
			<t:response>
			 	 <t:select path="//mail:GetMsgResponse//mail:su"  contains="${message.subject1}"/>
			 	 <t:select path="//mail:GetMsgResponse//mail:content"  contains="${message.content1}"/>
			 	 <t:select path="//mail:GetMsgResponse//mail:mp[@filename='${atch1.name}'][@part='2']" /> 
			 	 <t:select path="//mail:GetMsgResponse//mail:mp[@filename='${atch2.name}'][@part='3']" />
			 	 <t:select path="//mail:GetMsgResponse//mail:mp[@filename='${atch1.name}']" attr="part" set="part1" /> 
			 	 <t:select path="//mail:GetMsgResponse//mail:mp[@filename='${atch2.name}']" attr="part" set="part2" /> 	 	
			</t:response>
		</t:test>
		
		<!-- Remove single attachment from above mail using Server -->
		<t:test>
			<t:request>
				<RemoveAttachmentsRequest xmlns="urn:zimbraMail">
					<m id="${mail01_id_wc}" part="${part1}" />
				</RemoveAttachmentsRequest>
			</t:request>
			<t:response>
			 	 <t:select path="//mail:RemoveAttachmentsResponse//mail:m"  attr="id" set="mail02_id_wc"/>			 	 
			</t:response>
		</t:test>
		
		<!-- Verify on Server that attachment is deleted -->	
		<t:test>
			<t:request>
				<GetMsgRequest xmlns="urn:zimbraMail">
					<m id="${mail02_id_wc}" />
				</GetMsgRequest>
			</t:request>
			<t:response>
			 	 <t:select path="//mail:GetMsgResponse//mail:su"  contains="${message.subject1}"/>
			 	 <t:select path="//mail:GetMsgResponse//mail:content"  contains="${message.content1}"/>	
			 	 <t:select path="//mail:GetMsgResponse//mail:mp[@filename='${atch1.name}']" emptyset="1" /> 	 
			</t:response>
		</t:test>
		
		<!-- Verify on EWS that attachment is deleted -->
		<t:test>
			<t:request ews="true" username="${test_account2.name}" password="${test_account2.password}">
				<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
					xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
					xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages">
					<soap:Body>
						<SyncFolderItems
							xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">
							<ItemShape>
								<t:BaseShape>IdOnly</t:BaseShape>
							</ItemShape>
							<SyncFolderId>
								<t:FolderId Id="2" />
							</SyncFolderId>
							<SyncState />
							<Ignore />
							<MaxChangesReturned>512</MaxChangesReturned>
						</SyncFolderItems>
					</soap:Body>
				</soap:Envelope>
			</t:request>
			<t:response>
				<t:select path="//ewsmsg:SyncFolderItemsResponseMessage"
					attr="ResponseClass" match="Success" />
				<t:select
					path="//ewsmsg:SyncFolderItemsResponse//ewstype:Create//ewstype:ItemId"
					attr="Id" set="mail02_id" />
				<t:select
					path="//ewsmsg:SyncFolderItemsResponse//ewstype:Create//ewstype:ItemId"
					attr="ChangeKey" set="mail02_changeKey" />
				<t:select
					path="//ewsmsg:SyncFolderItemsResponse//ewsmsg:SyncState"
				    set="SyncState02" />
			</t:response>		
		</t:test>	
		
		<t:test>
			<t:request ews="true" username="${test_account2.name}" password="${test_account2.password}">
				<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
					xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
					xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages">
					<soap:Body>
						<GetItem
							xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">
							<ItemShape>
								<t:BaseShape>IdOnly</t:BaseShape>
								<t:BodyType>Best</t:BodyType>
								<t:AdditionalProperties>
									<t:FieldURI FieldURI="item:Body"/>
							          <t:ExtendedFieldURI PropertyTag="0x7D" PropertyType="String"/>
							          <t:FieldURI FieldURI="item:Attachments"/>
							          <t:FieldURI FieldURI="item:Subject"/>
							          <t:FieldURI FieldURI="item:Size"/>
							          <t:FieldURI FieldURI="message:From"/>
							          <t:FieldURI FieldURI="message:Sender"/>
							          <t:FieldURI FieldURI="item:HasAttachments"/> 
								</t:AdditionalProperties>
							</ItemShape>
							<ItemIds>
								<t:ItemId Id="${mail02_id}" ChangeKey="${mail02_changeKey}" />
							</ItemIds>
						</GetItem>
					</soap:Body>
				</soap:Envelope>
			</t:request>
			<t:response>
				<t:select path="//ewsmsg:GetItemResponseMessage" attr="ResponseClass"
					match="Success" />
				<t:select path="//ewsmsg:GetItemResponseMessage//ewstype:Subject"
					match="${message.subject1}" />
				<t:select path="//ewsmsg:GetItemResponseMessage//ewstype:HasAttachments" match="true" />	
				<t:select
					path="//ewsmsg:GetItemResponseMessage//ewstype:Attachments/ewstype:FileAttachment/ewstype:Name"
					match="${atch2.name}" />	
				<t:select path="//ewsmsg:GetItemResponseMessage//ewstype:Attachments/ewstype:FileAttachment/ewstype:Name" match="${atch1.name}" emptyset="1" />				
			</t:response>
		</t:test>			
	</t:test_case>
</t:tests>
	
	
	

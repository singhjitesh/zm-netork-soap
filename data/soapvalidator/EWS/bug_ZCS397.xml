<t:tests xmlns:t="urn:zimbraTestHarness">

	<t:property name="domain_name" value="zcs397.com" />
	<t:property name="test_account1.name" value="zcs397_user1@${domain_name}" />
	<t:property name="test_account2.name" value="zcs397_user2@${domain_name}" />
	<t:property name="valid_cert.name.account2"
		value="${testMailRaw.root}/zcs-397/zcs397-user2_digitalid.p12" />	
	<t:property name="compose.subject" value="encrypt test" />
	<t:property name="password_testcase1" value="zimbra" />
	<t:property name="password_testcase2" value="zimbra" />
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}" />
	<t:property name="test_acct.server" value="NOT_DEFINED" />	

	<t:property name="mime_content"
		value="UmV0dXJuLVBhdGg6IHpjczM5N191c2VyMUB6Y3MzOTcuY29tDQpSZWNlaXZlZDogZnJvbSAxMC4xNS4zMi43MSAoTEhMTyBsb2NhbGhvc3QpICgxMC4xNS4zMi43MSkgYnkNCiB6ZGV2LXZtMDAyLmVuZy56aW1icmEuY29tIHdpdGggTE1UUDsgVGh1LCAyOCBEZWMgMjAxNyAwNjo1NTo1OCAtMDUwMCAoRVNUKQ0KRGF0ZTogVGh1LCAyOCBEZWMgMjAxNyAwOTo1ODoxMyArMDAwMCAoVVRDKQ0KRnJvbTogemNzMzk3IHVzZXIxIDx6Y3MzOTdfdXNlcjFAemNzMzk3LmNvbT4NClRvOiB6Y3MzOTcgdXNlcjIgPHpjczM5N191c2VyMkB6Y3MzOTcuY29tPg0KTWVzc2FnZS1JRDogPDEzMTI5ODIyMTUuMjYwNC4xNTE0NDU1MDkzNzM3LkphdmFNYWlsLnppbWJyYUB6Y3MzOTcuY29tPg0KU3ViamVjdDogZW5jcnlwdCB0ZXN0DQpNSU1FLVZlcnNpb246IDEuMA0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9wa2NzNy1taW1lOyBuYW1lPSJzbWltZS5wN20iOyBzbWltZS10eXBlPWVudmVsb3BlZC1kYXRhDQpDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiBiYXNlNjQNClgtT3JpZ2luYXRpbmctSVA6IFsxMC4xNS4zMi43MV0NClgtTWFpbGVyOiBaaW1icmEgOC44LjBfR0FfMTAwMCAoWmltYnJhV2ViQ2xpZW50IC0gR0M2MyAoTWFjKS84LjguMF9HQV8xMDAwKQ0KVGhyZWFkLUluZGV4OiA3TE8raFdjZG5nZzZPRUEvQlBmbG5FMWpjWTNvYWc9PQ0KVGhyZWFkLVRvcGljOiBlbmNyeXB0IHRlc3QNCg0KTUlBR0NTcUdTSWIzRFFFSEE2Q0FNSUFDQVFBeGdnSThNSUlCR2dJQkFEQ0JnakI3TVE4d0RRWURWUVFLRXdaNmFXMWljbUV4SXpBaA0KQmdrcWhraUc5dzBCQ1FFV0ZHRmtiV2x1UUhSbGMzUmtiMjFoYVc0dVkyOXRNUkl3RUFZRFZRUUhFd2xRWVd4dklFRnNkRzh4Q3pBSg0KQmdOVkJBZ1RBa05CTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUF4UU1lbWx0WW5KaFgyRmtiV2x1QWdNUUFBTXdEUVlKS29aSQ0KaHZjTkFRRUJCUUFFZ1lBNVNGc3JMa0hjQUJBUUhqdk40SERwWDN4ME0yaWZJLzE2NmZSazhWWnU2ZGY3YkJEQWJncVRXZnR3ZW9wag0KVDE1SHV4YXV6UFBSOXpDOCtBZk1ieVpQakh4akd0aWpuclJoK0JPUVdGUDZ4dGs5Z1FDcHNWQ2Z2TCtZOGdBK1dqSkZlWlkxZm1tTQ0KaGR6SzllUnV5YWtkUHA1VzhoWStmSmw5RzMzYVg4N1BZRENDQVJvQ0FRQXdnWUl3ZXpFUE1BMEdBMVVFQ2hNR2VtbHRZbkpoTVNNdw0KSVFZSktvWklodmNOQVFrQkZoUmhaRzFwYmtCMFpYTjBaRzl0WVdsdUxtTnZiVEVTTUJBR0ExVUVCeE1KVUdGc2J5QkJiSFJ2TVFzdw0KQ1FZRFZRUUlFd0pEUVRFTE1Ba0dBMVVFQmhNQ1ZWTXhGVEFUQmdOVkJBTVVESHBwYldKeVlWOWhaRzFwYmdJREVBQUZNQTBHQ1NxRw0KU0liM0RRRUJBUVVBQklHQWRHSEpPSnRBWVZBclZOQ09lZnRISk81TVF0YXB1dlUwcDFsbXNldVl1VnpEaDBTR1lySll5bWlaa1FhWQ0KNjU3czNJclVGaDF0dE52YU8xYno3NXJCa01uMTVab3pmcFhHd1NyOUQ5ZXhIK28yVkdSb3IxdFB1MHFHenFlczErV3U2amtpK2U1Mw0KZ1dDR09zWVJ2UW5vRGU3VG9BUDhYeTR5aUl5YUJpU2dERWd3Z0FZSktvWklodmNOQVFjQk1Ca0dDQ3FHU0liM0RRTUNNQTBDQVRvRQ0KQ0VqeWxPVlZmZzh0b0lBRWdnUG9PUmJvbXFSY3JtTUx2Kzd3WXJPcEM4ZTExZ2IxeFFab0NsM1F6aGZGempYVUdsVHJuaHBnYkxnbg0KZjNhQkVPYk1POUh6alVRU1BjQXZXc2VYRU1QS2RjaEVqa0VZSkV4NkxhZzBTQnlHNVdrUE1NT1J4bzFKVmxyNnBqdlpYTzJuTEp6Mw0KbE1WVkNBV0xmS09lVzFzb3o4WG9rNUtTdmV2WjBDNytkSC9TMWxsa0dUVURsQnh6UmFVVUxlWnFFOVF0T0VpVlRkQmZZdkFtbi9scg0KSE90RnFneHBTbElKeFRwRVJ6b0l1RHE4TU5wYk1VZEpaSGlEeXRVVXBWK0JhMHZYVk5wdXpRNlliZ0VnV0tiUlJLUkZ3TzFpY21xQQ0KckhFbDEwT2E5bTRiMGtGQjZWZm1IcHVXM05VQk9pQ29laW16N2dNY0x5NnpTbnNBaGFSMGxRZnZNL1NnSnZhTmV5NFNsSnZic0lJVQ0KK1BiaWMyakVZZzBtMjZwZDc1aUFSeHJOQ1h2Y0tPTEE2K3BNWEJxOW1HcDdiOGExUmhkQmJ3MTd6QWg4VXM5M1VRY0p6Q2w2NGxSTA0KQnlQUU1rbnlIZ3R2bGlGSWQ4R04vV2ZuV24zZzcxM09ubExpd0xidmdDenR0RXc4L0ZORkhqSjl6azJHYjBkaStIT2lSNWZlczZqbw0KS2NMcmkrTFR0Z2pWekNQbWk2akJFd1JaUlRJS3JhaUo5UFZkVmlzSzJyRXFHTGRKeHI3dVpsbHFha2pkVHp0eEZta1JidjByZmtlUg0KeUlDeEtPT0p2VjZXek9zYkhzWkFVaTdUUkRnS0RhU2FjRkI3Tjd0Y2h0QUhCRm5xUUFETGVCYTVDU0ZSTFhLSER4UGp2bHMwR3VIcw0KME9BejdKOUxtMmZaaUFjZTNwVWRQRzVxalBjcUhzaGZUVXhIemw1YnYzK1lhSmFUMExsRjRwY1l2cWpkQ3JmOXpLd3B1TVZPbjZPWQ0KdmV4T0h2ejIwZ3IzSWpoL2JKOG5PUnk2bnVzWlMvb09JUE83VCtkV21MUkVSbnRTMlFSZUNxUGN4aGtDbGkrdzA5MmVrd3VrSkpxTQ0KNUNtQjRVUEg1eG56L01NYUVqdWJnMS85L1A2cnVCYndnSS8rZisrVDZpMVRxak85dnhDN2ZlRGw0WFk3a0daem5rbldXV00xREMwZg0KaDExLzFsNXZ6UHZOQnViRGlIKzVFVkhYcHJrUGtIbjdQanNHb1lnVkVPTStvU3F0TURWTFdhWWdiYktvTTIxWmFLTmZkUTBxOXlxag0KNlhiMnpwYWlLM25pNkQzY09samptZ2c2ZGh5VXdMN2MrVnlSczg4U2kvWFloR3l4c1I5QXF3bklZeFFGQ0l0YmRqVURVclJwQktZTA0KclRBdFI3VDRBa0FEZEVFT1A4TkV1OEpLODFDekdJK2JJb0JJbWU5WHZuT1N1SDJtaEE5cXBBaVRRZGhjc2FrSEpFeGYrTVpFOEpxVw0KS1BoNUZiMjR4cGlucTdTTjRyYm55Z1Ywb3RKQ2RmZXBZWG5YcG5ia3M1NnV2ZG1tYVAzSzc4aTl4SllkRlkzWU14b1I3VEZFWlJyUA0KODVMNW5pZUpWQ0tFbHVuYlBiakltK2hicWU2OGV2MDRtN1BwbDNmbndORFI4dU1ZeUpJNUJlcmt6YzFuWEI4SGQvcXhKSWVqZ3J6cw0KTkpSR29zQnUrenVGSnVIaDlscHRmamJvbkc4RU1YK29NZmZRdFFrRjk1TXJZdCsvN1lJNUhwZmNncXZzbkFTQ0EramE2VHAxVXFkQw0KcFNKbUFlL2tEU1FET3VKNGxzdEZ5QW9jZUNwdTN1bkIzUGtkMFNWbFZ1RmhBOG1QYjJ6WWRoSXZTWnhXVUh6dlNrSEhuK2xvVlBYMQ0KV1dQN3VoVVd2QWdBNWdNRGZqblp0U2tFRXBmWStDV2wvU0pna1hqM3J2b0ZtZWhuUGtNWGloMkdDRmNvRVRLdVIyMU5BekxOcnlRdQ0KRC9SM0VhbTYyc1gwak1rd1VjZkJPMUttcDhCbTA3STlQV0tNL3N0WUlPcnNDWktGaWE4NG5ockt3bHdhMWhKTjI1dmExWUE4T1FPOQ0KQ3o0ekNUYk9ZRit5R1NXYkg0Uk5pQm1qNUVvSGxLTzRWdjRBSXdlbGw4ZWErOHFhSVl2R3ltaGZDZDkrVURFci9SMkpMeE1ibFVROQ0KV1o3aGhVbEJQSlIxcWliVjJOSElQL3E1b0tGUUoySE44Ry9kblhPS0xxWmp0M2FLVFQrUTBBa0JuWEI1bHhjWEZNMzFNdCs5b1dwVw0Kc2YrUEtFbkZGUHR3NXVoMjVUSnV3L1Z2ZzI4WVQ0SWd0SlJYRzlEQ3Z3ZjIzUnJvQk1qTExudTVzYlViK0h0bUZjK1MzZjRJY2FXNA0KVGJuRk9nV3hsYlI4eUI1YUExdFlOZ3JvM2Z5ZVFQZjUvK05DbEtDcktzRmJSWWszUFZBRmNqMFIvbVpJVkdwOFloWS8wWGh4QUowbQ0KSUY5TGs4SUgwSnkzeE5DQTd0TCtjZXd5aWt3azlLQzVKcUIwVlhNaW40S3FNdGtDUXBSS2Urd2RueWQ5c2pKU3Q5YURGazUrYUdZMA0KQTZJTVU5OFFBL1JHV2ZMbEJQZEoyaXp2Qmsvb1pVTFFSU3hybkZIclh2eU9sSGpCbVp5aHQ4ZzdrL0czWUhEK1NsaWNaRDhpNEI2NA0Ka1pYSkpGbWw1K3hyYk5pL1JYQnRLcWNBT0RFRTFURC9ZR0R4RlZ0b2pYNzl4ak80WkZlVkJJa1dYQWhxaWxXUHNPYStlQWViQ3lLUA0KdVJramorT0ZFR0xMOGNTbVNNR3ZsTmRFUGNkeW5PSlg0WTR6dFBqQVkvLzVIT0VLUC85ellSZU9MUEU3S2Z0bjhDbklERmUxd0dLSw0KeTVQeTRtWFZjN3dnVlE0NnN2VXc3N2pmWjlJNEU4NzBYVnFnd2VPRDl6UU53Y2t6RW43cWFDZEJjTUx2TThuYkpxMWtyeDdwM0NoMA0KdlhKaXh2ZS9TT2Ivd01GcVJHd0NteDhQZGNtcUpNWlhMbE1pK3FjeTBTZkp3TWZUWFFFQjl1MlZxWEs4ZnpGWHlKcjcvN2xJMmtjcw0Ka3BSU3huMUtIWXRQbUFBTDBvd1dBYy9zQlJvWXR2dnNOeTZJbTR6M25QVVRxZDVSTGdORkt2anJPaSt6VEs5OVZhWXoxeVBuL0Rmbg0KSGZtWmtXQ2FnVEx3eUlIb1QzTXp0VlNhazNGNXZwdVE0L016R05GT2hjSTV5TU9iT2FBbStha0RiMzlFM2M4T2RmbE82ZE1NVEtDTA0KZlVNZXNGUndOaHpVWTdPMlh3dFNvNmpYWU4wZkdxajBaWjFqUUw3SHJWT0lJektmYzN5SVdzb0FNcy84NUJFY1BLc2NEVEp0dHQ5OA0KcDllQUFnZm96N29mQVBTclIvUUJvR3VIbHVjMTlFRng2TzlyMUl1M3Jvd3BSUkZ3RS9uS2loQ1JPeGJDNUg5eHVzdjVCYmI5djNCRw0KWGVOdTZOdEFoNlBsdkhWNXUvRlQzQ0RDa2VCUEI4bWFCSUlENkIxU3ZBcjRvUGgzZDJnUFhWenVqais4aWNFS09sUGxnWFk0L1VBeQ0KNTk0U3h3RXc2dVpRaHlSU0NuWFNpd2V1amtOYmxHaEVLcFBMRWs5a3F4Y0NBOGNudTNVeWkvVjZOODkvYzUxOEovNE9pTXNVNmljLw0Kc211T0FaK0VVNHBYY01ndTFRQ1FwWDdlRjFyNzJkTU1aY1NubCtXa2dJSkZPL2R2QnNlZ3hubW9zRWxUVy9xRFFGZFNGZHk2a2xicw0KMEMzVjk1WGJCcU9CbEdlcnFocTFmbHlnQ1Vodyt6VEI5Z3RmejBFWXJCYndPWjQrZkZFKzRLYW1pVitmUkdCdUhROUxiVVJsZzF1eA0KZ1FlOXcvY1hmNDNmTVVwM0o3WjlaWGZaWU02UGR1L1o2c3hDMWJ2NmEzUGJzUDd3cnZPQXhrOXU0ZnMvWG96UVBoQmVqU1V6b0FvaA0KT05zbnZDKzhheHllNjBaWW1BYVkzZVZHT1BnUmZRUWVReE83UTdXc1JZcW40UjAzOTFhN0syS01TU3UrZE92ak83a0prTjZwRmZlUw0KUnZQbDQ1dXpLdXFMaFBTMW1QK0gyLzlFRWRFM3dMeVZjU0RHNEZmQmVxWkhxOW1qWXVuZUIwLzJIZ2xmcU5kaThPcFRyY1BqRmxvSA0KN1FDV2lBbnFsZlR2MmY5OVI3TUZERHJLK0dCYUJyZWZ5WXN4aTlJNUZsVEtvNmk5UmlRclFBMEg2b3JhWGFaZnEwK0tmbG42aVZYMA0KdzVKSFRZQXc2Wk53ZkdiL2xaMHl0YThVN1FOandNOG0wc3RBTy9JQ3ljRVY2YnlHcGxIeUJESzB6aS9OSzV0N0NGVmF6VjNZa3VmaA0KTitGbWNMcGFFSVlGNSttOTZBM0VSOG1hSEwwT0NkWmFyWml5YWNDQ2hMZUJOZFlKQ1M4UnJiamo2QXNlZi80SXZMc2F5T1VPTDBTdA0KUG1yZEpFeDVxaENIWENiT2U4N2hXVm1CRk5UQWdCc2pIekF0b3cxWkdMTnFnNG14aGZ2UlJISmZsWWhiMWdxaHNIZE91RUJ5ZURlRQ0KZkV4QXZlbGxKYmV4b0IxLzBHOExJd2k5emQxbWE1cXNrclJqcFBQZTJyRHVHRFFINzhpWEN6UzZHUWkwVnYyc2ZydDBFakIyTlVwZw0KTTZXSk95UGFCbk1PaTE1d3kwV2VZT21neVJUUy9xbUFOT2F3TFlvRzVVNmYrZ1dDQXZHLzhXeUlWMXVyTEIvNGR2TXIwdGxmUi9LWg0KSGR2MWhjQWtEZ2Q2MDU5U1hJa1VjaWhmSlY1bjNnKzF0OXpUVDJqY3pQSk5aemN0c3VjSHZsSnJwbVY3UGo4cGJVTHZKczNQT3FyVw0KWEZoOVRDQlp5T3FsRXkrUHNHaC9qbllkbzRUWVpSNlZuT2kxZVN4Q1hTdVR0TU5Eanh1M0FKWkVEWm9qTjZmRllFSm1BWG5RSmdreg0KbHQreDhXR2Z0MWF6NzR3QWxNUExrVm03V0gwclV1REJ1QTQ4TTE3akc4UEMySjY2cm03YXZHT2dpQ0dHQWVFSWZnNVprSkRKSkliRQ0KeXg3U1RES1pDZlExUWdOdG1GYUdmMGtReFlKNGgwZDNrZlBCaE0xeUhTbE9WZE5ia1hQejNYaU5CdUYySUF3UDE5ZW5qYmIrUk5VZw0KOXY3L2F6V1haNmtjZEZrSFo4dm9yMlhWQmN2OWxUZHhDNElxKzRJMEZqdTUzSDdlcENvMldPT0xySHF1eVEzUDVSR1hRRVdZNzJMTA0KUEpFRWdnTFkwakNyNzMraGQvZmJlTHJNdXd5MnNXczFQSC9RNEE2THFOdEZLdnFERFZnWTZCR25LamVhb2JyMjlMWmVNdU9RbGtyQg0KbHhLU2V4T2Z4R2F4cFlIRHJRWHgvQ3VZUWpsMDEzMEVKOVZoUDR4LzEyT0xjZ1ZLV2xhYlgrenMwZS9tazF1OTFPV0FnV3JGVjk5bg0KWFpzZTZwK3h2SVNHU1pWbDJLZG5EaUpQNW92TmsvM3Q1c05wMFZwQ1g3Y0hZeVhIRVQva2daYTVhZ3dlaWw3MHlRVWFCcEp0QTJLQw0KSXRFa1BoTk9VZ01CSU9uUlVIRzZSb3Y5TUtWZ1ZXOVVEZktwczFDMnNaL1V3bjJvQU80VHNBb3FaYlhNekxQdGkyaDBqRy8rRmtQeA0Kbk45eEo3N2d5V3FnMUs3R1lSbHhybWNnZlkySmJiYnBCTVQ3UHc3Vnd4Tld2c3BRYU1Td1ljZWc3aWVUUmthK3d6V2JZTENhYUt3Wg0KRk9DWEhXbnUwenh0cUh5Q0xUMkNTOXBWL0dWM0N3UjlWczFvcnBJQTg3K0RETXhzOFBmVjBwckRSbVdtQ3lsWU9BMDNIamkreUttYQ0KVjNQR3ZUV0JpYmlPSnRkWkx4MG1MSWJyYmdsSjlJMHZTenlYMkFoNUwzSVloVzdvRjBKaEZSS1liTHZwT1ZWNWYva2tKZ2FlZXFOVw0Kc2RMOEg5dDdBcUFtWlBQVmVxT2wwMW5KSThUdGJFNWhIYVNjQ1RlVGVlTU9QUUUvYVVrZkJxSWhQYXBJcUU2MEZjZzlRZzl0RzFhdg0KMm03RStuUWo4RWxvTFF2ZGsxdHdSZWxROHhxRHl4MVZIaTEva1hDNmJHVXovRHliQ2FMSldWUXkzQ1NoaGR4WDkxcGpKWkhiV3JSSQ0KWXErbkNSNk9LZ2NibjRPN0VoTk04RnFRanBVR1IyZ2NYWEtVU0pQaElreGFWeTBFTnVyaXA1c1JDZUJJblNYZndwazRFd2dNYjVFSA0KaTFrNUR4cE9GVm9FT28yMU9BeWNZNWxKekIvV2xBQWdUejBpSUF3YmFjeUd2ZWtNVWZmMkdSdFJjdUhPelYyODRla05VaktnU2RLNA0KdU00WWpvSnJXd2lGUVk3dDhjc1BGc3I0cndhMkNMUzZ0WE5HUGo3eUVTbUhTNHJhZ2l5U2N4VzBxMkt2RmkvUDBwbmNXMUtUU2IxUg0KSExMb3ZPS2RJOVUybUFvYUJGRkZIT0RKNHJ0OTVsVjk5b3VHSXdRdGxxNWlIZjhjQnNQenpURXZLSDE4VDI0emEyUUFBQUFBQUFBQQ0KQUFBQQ0KDQo=" />

	<t:test_case testcaseid="Ping" type="always">
		<t:objective>basic system check</t:objective>

		<t:test required="true">
			<t:request>
				<PingRequest xmlns="urn:zimbraAdmin" />
			</t:request>
			<t:response>
				<t:select path="//admin:PingResponse" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="acctSetup1" type="always">
		<t:objective>create test account</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
	        <t:request>
	            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
	                <a n="zimbraSmimeOCSPEnabled">FALSE</a>
	            </ModifyConfigRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyConfigResponse"/>
	        </t:response>
	    </t:test>

		<t:test required="true">
			<t:request>
				<CreateDomainRequest xmlns="urn:zimbraAdmin">
					<name>${domain_name}</name>
				</CreateDomainRequest>
			</t:request>
			<t:response>

			</t:response>
		</t:test>


		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account1.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraFeatureSMIMEEnabled">TRUE</a>
					<a n="zimbraFeatureEwsEnabled">TRUE</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account1.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct1.server" />
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account2.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraFeatureSMIMEEnabled">TRUE</a>
					<a n="zimbraFeatureEwsEnabled">TRUE</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account2.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct2.server" />
			</t:response>
		</t:test>

	</t:test_case>


	<t:test_case testcaseid="bugZCS397" type="smoke">
		<t:objective>Send encrypted mail from zwc to ews client. </t:objective>
		<t:steps>1. Send a encrypted text mail from zwc to ews client user
			2. Verify on EWS client the mail received should be encrypted without
			certificate
		</t:steps>

		<t:property name="msg01.file" value="${testMailRaw.root}/zcs-397/mime01.txt" />

		<t:mailinjecttest>
			<t:lmtpInjectRequest>
				<filename>${msg01.file}</filename>
				<to>${test_account2.name}</to>
				<from>${test_account1.name}</from>
				<server>${test_acct2.server}</server>
			</t:lmtpInjectRequest>
		</t:mailinjecttest>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account2.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:uploadservlettest>
			<t:uploadServletRequest>
				<filename>${valid_cert.name.account2}</filename>
			</t:uploadServletRequest>
			<t:uploadServletResponse>
				<t:select attr="StatusCode" match="200" />
				<t:select attr="id" set="uploadFileId" />
			</t:uploadServletResponse>
		</t:uploadservlettest>

		<t:test>
			<t:request>
				<SaveSmimeCertificateRequest xmlns="urn:zimbraAccount">
					<upload id="${uploadFileId}"></upload>
					<password>${password_testcase1}</password>
				</SaveSmimeCertificateRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate"
					attr="pubCertId" set="pubCertId" />
				<t:select path="//acct:SaveSmimeCertificateResponse/acct:certificate"
					attr="pvtKeyId" set="pvtKeyId" />
				<t:select
					path="//acct:SaveSmimeCertificateResponse/acct:certificate/acct:emailAddress"
					match="${test_account2.name}" />
			</t:response>
		</t:test>

		<t:delay msec="5000"/>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${compose.subject}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:su"
					match="${compose.subject}" />
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetMsgRequest xmlns="urn:zimbraMail">
					<m id="${msg1.id}" />
				</GetMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:GetMsgResponse/mail:m" attr="isSigned"
					match="true" />
				<t:select path="//mail:GetMsgResponse//mail:content"
					contains="asd" />
				<t:select
					path="//mail:GetMsgResponse//mail:m//acct:certificate//acct:emailAddress"
					match="${test_account1.name}" />
			</t:response>
		</t:test>


		<t:test required="true">
			<t:request ews="true" username="${test_account2.name}"
				password="${defaultpassword.value}">
				<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
					xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
					xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages">
					<soap:Body>
						<GetFolder
							xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">
							<FolderShape>
								<t:BaseShape>AllProperties</t:BaseShape>
							</FolderShape>
							<FolderIds>
								<t:DistinguishedFolderId Id="inbox">
									<t:Mailbox>
										<t:EmailAddress>${test_account2.name}</t:EmailAddress>
									</t:Mailbox>
								</t:DistinguishedFolderId>
							</FolderIds>
						</GetFolder>
					</soap:Body>
				</soap:Envelope>
			</t:request>
			<t:response>
				<t:select path="//ewsmsg:GetFolderResponseMessage[1]" attr="ResponseClass"
					match="Success" />
				<t:select path="//ewsmsg:GetFolderResponseMessage[1]//ewstype:FolderId"
					attr="Id" match="2" />
				<t:select path="//ewsmsg:GetFolderResponseMessage[1]//ewstype:FolderId"
					attr="Id" set="inbox.id" />
				<t:select
					path="//ewsmsg:GetFolderResponseMessage[1]//ewstype:DisplayName"
					match="Inbox" />
			</t:response>
		</t:test>

		<t:test>
			<t:request ews="true" username="${test_account2.name}"
				password="${defaultpassword.value}">
				<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
					xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
					xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages">
					<soap:Body>
						<SyncFolderItems
							xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">
							<ItemShape>
								<t:BaseShape>IdOnly</t:BaseShape>
							</ItemShape>
							<SyncFolderId>
								<t:FolderId Id="${inbox.id}" />
							</SyncFolderId>
							<SyncState />
							<Ignore />
							<MaxChangesReturned>512</MaxChangesReturned>
						</SyncFolderItems>
					</soap:Body>
				</soap:Envelope>
			</t:request>
			<t:response>
				<t:select path="//ewsmsg:SyncFolderItemsResponseMessage"
					attr="ResponseClass" match="Success" />
				<t:select
					path="//ewsmsg:SyncFolderItemsResponse//ewstype:Create//ewstype:ItemId"
					attr="Id" set="mail01_id" />
				<t:select
					path="//ewsmsg:SyncFolderItemsResponse//ewstype:Create//ewstype:ItemId"
					attr="ChangeKey" set="mail01_changeKey" />
			</t:response>
		</t:test>

		<t:test>
			<t:request ews="true" username="${test_account2.name}"
				password="${defaultpassword.value}">
				<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
					xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
					xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages">
					<soap:Body>
						<GetItem
							xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">
							<ItemShape>
								<t:BaseShape>IdOnly</t:BaseShape>
								<t:BodyType>Best</t:BodyType>
								<t:AdditionalProperties>
									<t:ExtendedFieldURI PropertyTag="0x10F4"
										PropertyType="Boolean" />
									<t:FieldURI FieldURI="item:Body" />									
									<t:FieldURI FieldURI="item:Attachments" />
									<t:FieldURI FieldURI="item:Subject" />
									<t:FieldURI FieldURI="item:Size" />
									<t:FieldURI FieldURI="message:From" />								
								</t:AdditionalProperties>
							</ItemShape>
							<ItemIds>
								<t:ItemId Id="${mail01_id}" ChangeKey="${mail01_changeKey}" />
							</ItemIds>
						</GetItem>
					</soap:Body>
				</soap:Envelope>
			</t:request>
			<t:response>
				<t:select path="//ewsmsg:GetItemResponseMessage" attr="ResponseClass"
					match="Success" />
				<t:select path="//ewsmsg:GetItemResponseMessage//ewstype:Subject"
					match="${compose.subject}" />
				<t:select path="//ewsmsg:GetItemResponseMessage//ewstype:MimeContent"
					contain="${mime_content}" />
			</t:response>
		</t:test>

	</t:test_case>


	<t:finally>
		<t:test id="admin_login" required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
	        <t:request>
	            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
	                <a n="zimbraSmimeOCSPEnabled">TRUE</a>
	            </ModifyConfigRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyConfigResponse"/>
	        </t:response>
	    </t:test>


		<t:test required="false">
			<t:request>
				<DeleteAccountRequest xmlns="urn:zimbraAdmin">
					<id>${test_account1.id}</id>
				</DeleteAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:DeleteAccountResponse" />
			</t:response>
		</t:test>
		
		
		<t:test required="false">
			<t:request>
				<DeleteAccountRequest xmlns="urn:zimbraAdmin">
					<id>${test_account2.id}</id>
				</DeleteAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:DeleteAccountResponse" />
			</t:response>
		</t:test>
		
	</t:finally>		

</t:tests>
	
	
	